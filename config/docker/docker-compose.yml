version: '3.8'

services:
  celsiuspulse:
    build:
      context: ../../
      dockerfile: Dockerfile
    container_name: celsiuspulse-bot
    restart: unless-stopped
    env_file:
      - ../../.env
    volumes:
      # Persistent data
      - ../../data:/app/data
    networks:
      - celsiuspulse-network
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

#   # Optional: Redis for caching and rate limiting
#   redis:
#     image: redis:7-alpine
#     container_name: celsiuspulse-redis
#     restart: unless-stopped
#     ports:
#       - "6379:6379"
#     volumes:
#       - redis-data:/data
#     networks:
#       - celsiuspulse-network
#     command: redis-server --appendonly yes
#     healthcheck:
#       test: ["CMD", "redis-cli", "ping"]
#       interval: 10s
#       timeout: 5s
#       retries: 5

#   # Optional: PostgreSQL for data persistence
#   postgres:
#     image: postgres:15-alpine
#     container_name: celsiuspulse-db
#     restart: unless-stopped
#     environment:
#       POSTGRES_DB: celsiuspulse
#       POSTGRES_USER: ${DB_USER:-celsiuspulse}
#       POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
#     ports:
#       - "5432:5432"
#     volumes:
#       - postgres-data:/var/lib/postgresql/data
#       - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
#     networks:
#       - celsiuspulse-network
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-celsiuspulse}"]
#       interval: 10s
#       timeout: 5s
#       retries: 5

#   # Optional: Grafana for monitoring
#   grafana:
#     image: grafana/grafana:latest
#     container_name: celsiuspulse-grafana
#     restart: unless-stopped
#     ports:
#       - "3000:3000"
#     environment:
#       - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
#       - GF_INSTALL_PLUGINS=redis-datasource
#     volumes:
#       - grafana-data:/var/lib/grafana
#       - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
#       - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
#     networks:
#       - celsiuspulse-network
#     depends_on:
#       - prometheus

#   # Optional: Prometheus for metrics
#   prometheus:
#     image: prom/prometheus:latest
#     container_name: celsiuspulse-prometheus
#     restart: unless-stopped
#     ports:
#       - "9090:9090"
#     volumes:
#       - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#       - prometheus-data:/prometheus
#     command:
#       - '--config.file=/etc/prometheus/prometheus.yml'
#       - '--storage.tsdb.path=/prometheus'
#     networks:
#       - celsiuspulse-network

#   # Optional: Nginx reverse proxy
#   nginx:
#     image: nginx:alpine
#     container_name: celsiuspulse-nginx
#     restart: unless-stopped
#     ports:
#       - "80:80"
#       - "443:443"
#     volumes:
#       - ./nginx/nginx.conf:/etc/nginx/nginx.conf
#       - ./nginx/ssl:/etc/nginx/ssl
#     networks:
#       - celsiuspulse-network
#     depends_on:
#       - celsiuspulse

networks:
  celsiuspulse-network:
    driver: bridge

# volumes:
#   redis-data:
#   postgres-data:
#   grafana-data:
#   prometheus-data: