[tool.poetry]
name = "celsiuspulse"
version = "1.0.0"
description = "Temperature monitoring bot for warehouses with intelligent alerts"
authors = ["CelsiusPulse Team <team@celsiuspulse.example.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/yourusername/CelsiusPulse"
repository = "https://github.com/yourusername/CelsiusPulse"
documentation = "https://celsiuspulse.readthedocs.io"
keywords = ["telegram", "bot", "monitoring", "temperature", "warehouse", "alerts", "docker", "iot"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: System Administrators",
    "Topic :: Communications :: Chat",
    "Topic :: System :: Monitoring",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Framework :: AsyncIO",
    "Operating System :: OS Independent",
]

[tool.poetry.dependencies]
python = "^3.9"
python-telegram-bot = "^20.7"
nest-asyncio = "^1.6.0"
python-dotenv = "^1.0.1"
requests = "^2.32.3"
aiohttp = "^3.10.8"
cryptography = "^43.0.1"
pytz = "^2024.1"
setuptools = "<81.0.0"
aiohttp-cors = "^0.7.0"
httpx = "^0.25.2"
aiofiles = "^24.1.0"
pillow = "^10.4.0"
urllib3 = "^1.26.16"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.3"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.24.0"
pytest-mock = "^3.12.0"
black = "^24.8.0"
flake8 = "^7.1.1"
mypy = "^1.7.1"
bandit = "^1.7.5"
safety = "^3.0.1"
pre-commit = "^3.6.0"
sphinx = "^7.2.6"
sphinx-rtd-theme = "^2.0.0"

[tool.poetry.group.monitoring.dependencies]
prometheus-client = "^0.19.0"
sentry-sdk = "^1.39.1"

[tool.poetry.scripts]
celsiuspulse = "main:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | venv
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_any_generics = false
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/setup.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
skip_empty = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if False:",
    "pass",
]

[tool.coverage.html]
directory = "htmlcov"