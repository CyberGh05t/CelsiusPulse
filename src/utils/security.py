"""
–£—Ç–∏–ª–∏—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è CelsiusPulse Bot
–ó–∞—â–∏—Ç–∞ –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞—Ç–∞–∫ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
"""
import time
from collections import defaultdict, deque
from datetime import datetime, timedelta
from typing import Dict, Optional
from src.config.settings import RATE_LIMIT_PER_MINUTE, ENABLE_RATE_LIMITING
from src.config.logging import SecureLogger

logger = SecureLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è rate limiting
user_request_counts: Dict[int, deque] = defaultdict(deque)
blocked_users: Dict[int, datetime] = {}
suspicious_activity: Dict[int, int] = defaultdict(int)


class RateLimiter:
    """–°–∏—Å—Ç–µ–º–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    @staticmethod
    def is_rate_limited(chat_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –µ—Å–ª–∏ –ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω
        """
        if not ENABLE_RATE_LIMITING:
            return False
        
        current_time = time.time()
        minute_ago = current_time - 60
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        while (user_request_counts[chat_id] and 
               user_request_counts[chat_id][0] < minute_ago):
            user_request_counts[chat_id].popleft()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(user_request_counts[chat_id]) >= RATE_LIMIT_PER_MINUTE:
            logger.warning(f"Rate limit exceeded for user {chat_id}")
            return True
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        user_request_counts[chat_id].append(current_time)
        return False
    
    @staticmethod
    def block_user(chat_id: int, duration_minutes: int = 10):
        """
        –í—Ä–µ–º–µ–Ω–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            duration_minutes: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
        """
        blocked_until = datetime.now() + timedelta(minutes=duration_minutes)
        blocked_users[chat_id] = blocked_until
        logger.warning(f"User {chat_id} blocked until {blocked_until}")
    
    @staticmethod
    def is_user_blocked(chat_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
        Args:
            chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        """
        # –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º big_boss –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        from src.core.auth import BIG_BOSS
        if chat_id in BIG_BOSS:
            return False
            
        if chat_id not in blocked_users:
            return False
        
        if datetime.now() >= blocked_users[chat_id]:
            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
            del blocked_users[chat_id]
            return False
        
        return True
    
    @staticmethod
    def unblock_user(chat_id: int):
        """
        –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if chat_id in blocked_users:
            del blocked_users[chat_id]
            logger.info(f"User {chat_id} unblocked")
        
        if chat_id in suspicious_activity:
            del suspicious_activity[chat_id]
            logger.info(f"Suspicious activity counter reset for user {chat_id}")


class SecurityMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    
    @staticmethod
    def log_suspicious_activity(chat_id: int, activity_type: str, details: str = ""):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        
        Args:
            chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            activity_type: –¢–∏–ø –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
        """
        suspicious_activity[chat_id] += 1
        logger.warning(
            f"Suspicious activity detected",
            extra={
                'chat_id': chat_id,
                'activity_type': activity_type,
                'details': details,
                'total_incidents': suspicious_activity[chat_id]
            }
        )
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞
        if suspicious_activity[chat_id] >= 5:
            RateLimiter.block_user(chat_id, duration_minutes=30)
            logger.critical(f"User {chat_id} auto-blocked due to repeated suspicious activity")
    
    @staticmethod
    def check_command_injection(text: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –ø–æ–ø—ã—Ç–∫–∏ command injection
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ injection
        """
        dangerous_patterns = [
            ';', '|', '&', '$', '`', '$(', '${',
            'rm ', 'sudo ', 'chmod ', 'wget ', 'curl ',
            '../', '..\\', '/etc/', 'c:\\', 'cmd.exe',
            'powershell', '/bin/', 'bash', 'sh '
        ]
        
        text_lower = text.lower()
        for pattern in dangerous_patterns:
            if pattern in text_lower:
                return True
        
        return False
    
    @staticmethod
    def check_sql_injection(text: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –ø–æ–ø—ã—Ç–∫–∏ SQL injection
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ injection
        """
        sql_patterns = [
            'union select', 'drop table', 'insert into', 'update set',
            'delete from', 'exec ', 'execute ', 'sp_', 'xp_',
            "' or '1'='1", '" or "1"="1', '1=1', '1=1--',
            'information_schema', 'sys.', 'master..'
        ]
        
        text_lower = text.lower()
        for pattern in sql_patterns:
            if pattern in text_lower:
                return True
        
        return False


def validate_request_security(chat_id: int, text: str) -> tuple[bool, Optional[str]]:
    """
    –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
    
    Args:
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        text: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
        
    Returns:
        Tuple (is_safe, error_message)
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if RateLimiter.is_user_blocked(chat_id):
        return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
    if RateLimiter.is_rate_limited(chat_id):
        SecurityMonitor.log_suspicious_activity(
            chat_id, "rate_limit_exceeded", 
            f"Too many requests: {len(user_request_counts[chat_id])}"
        )
        RateLimiter.block_user(chat_id, duration_minutes=5)
        return False, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤"
    
    # –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É injection –¥–ª—è callback_data —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
    if text.startswith(('confirm_registration:', 'reject_registration:', 'toggle_group:')):
        return True, None
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ command injection
    if SecurityMonitor.check_command_injection(text):
        SecurityMonitor.log_suspicious_activity(
            chat_id, "command_injection_attempt", 
            f"Suspicious text: {text[:100]}"
        )
        return False, "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ injection –∞—Ç–∞–∫–∏"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ SQL injection
    if SecurityMonitor.check_sql_injection(text):
        SecurityMonitor.log_suspicious_activity(
            chat_id, "sql_injection_attempt",
            f"Suspicious SQL pattern: {text[:100]}"
        )
        return False, "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ SQL injection"
    
    return True, None


def get_security_stats() -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    return {
        'active_users': len(user_request_counts),
        'blocked_users': len(blocked_users),
        'suspicious_users': len(suspicious_activity),
        'total_suspicious_incidents': sum(suspicious_activity.values())
    }


def detect_invalid_content(text: str) -> str:
    """
    –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    
    Args:
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å —Ç–∏–ø–æ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∞–ª–∏–¥–Ω—ã–π
    """
    import re
    
    if not text or not isinstance(text, str):
        return ""
    
    text_lower = text.lower().strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ URL –∏ —Å—Å—ã–ª–∫–∏
    url_patterns = [
        r'https?://',
        r'www\.',
        r'\.com',
        r'\.ru', 
        r'\.org',
        r'\.net',
        r't\.me',
        r'telegram\.me',
        r'@[a-zA-Z0-9_]+',  # —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    ]
    
    for pattern in url_patterns:
        if re.search(pattern, text_lower):
            return "üîó —Å—Å—ã–ª–∫–∞"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º-—Å–ª–æ–≤–∞
    spam_words = [
        '—Ä–µ–∫–ª–∞–º–∞', '–ø—Ä–æ–¥–∞–º', '–∫—É–ø–∏', '—Å–∫–∏–¥–∫–∞', '–∞–∫—Ü–∏—è', '–±–æ–Ω—É—Å',
        '–∑–∞—Ä–∞–±–æ—Ç–æ–∫', '–¥–µ–Ω—å–≥–∏', '–¥–æ–ª–ª–∞—Ä', '–±–∏—Ç–∫–æ–∏–Ω', '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞',
        '–º–ª–º', '—Å–µ—Ç–µ–≤–æ–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥', '–ø–∏—Ä–∞–º–∏–¥–∞'
    ]
    
    for spam_word in spam_words:
        if spam_word in text_lower:
            return "üì¢ —Ä–µ–∫–ª–∞–º–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–∞–π–ª–æ–≤—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    file_extensions = ['.exe', '.bat', '.cmd', '.scr', '.zip', '.rar']
    for ext in file_extensions:
        if ext in text_lower:
            return "üìé –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª"
    
    return ""