"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""
from telegram import Update
from telegram.ext import ContextTypes
from src.config.logging import SecureLogger
from src.core.registration_manager import registration_manager
from src.core.threshold_context_manager import threshold_context_manager
from src.utils.validators import validate_user_input, validate_fio
from src.utils.security import validate_request_security, detect_invalid_content
from src.bot.utils import smart_update_current_menu

logger = SecureLogger(__name__)


class InputHandler:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–ª–Ω—ã–º —É–º–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º
        –í–°–ï –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª—è—é—Ç—Å—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —É–º–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        """
        chat_id = update.effective_chat.id
        text = update.message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Å—Å—ã–ª–∫–∏, —Å–ø–∞–º, etc.)
        invalid_content_type = detect_invalid_content(text)
        if invalid_content_type:
            await InputHandler._handle_invalid_content(update, chat_id, text, invalid_content_type)
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å —É–º–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º
        is_safe, error_msg = validate_request_security(chat_id, text)
        if not is_safe:
            await InputHandler._handle_invalid_content(update, chat_id, text, "‚ö†Ô∏è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            return
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —É–º–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º
        if not validate_user_input(text):
            await InputHandler._handle_invalid_content(update, chat_id, text, "‚ùå –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã")
            return
        
        logger.info(f"–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        try:
            # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–∞–ª–∏–¥–Ω—ã–π —Å–ª—É—á–∞–π)
            threshold_handled = await InputHandler._handle_threshold_input(update, text, chat_id)
            if threshold_handled:
                return
            
            # –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            if registration_manager.is_in_registration(chat_id):
                await InputHandler._handle_registration_input(update, text, chat_id)
                return
            
            # –ü–†–ò–û–†–ò–¢–ï–¢ 3: –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è = –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            await InputHandler._handle_invalid_content(update, chat_id, text, "üìù –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç {chat_id}: {e}")
            await InputHandler._handle_invalid_content(update, chat_id, text, "üí• —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞")
    
    @staticmethod
    async def _handle_threshold_input(update: Update, text: str, chat_id: int) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        
        Returns:
            True –µ—Å–ª–∏ –≤–≤–æ–¥ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–∫ –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        """
        user_id = update.effective_user.id
        context = threshold_context_manager.get_context(user_id)
        
        if not context:
            return False
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç "–º–∏–Ω –º–∞–∫—Å"
        parts = text.strip().split()
        if len(parts) != 2:
            await InputHandler._handle_invalid_content(
                update, chat_id, text, "‚ùå –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–Ω—É–∂–Ω–æ: –º–∏–Ω –º–∞–∫—Å)"
            )
            return True
        
        try:
            min_temp = float(parts[0])
            max_temp = float(parts[1])
            
            if min_temp >= max_temp:
                await InputHandler._handle_invalid_content(
                    update, chat_id, text, "‚ùå –º–∏–Ω–∏–º—É–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞"
                )
                return True
            
            if min_temp < -50 or max_temp > 100:
                await InputHandler._handle_invalid_content(
                    update, chat_id, text, "‚ùå –∑–Ω–∞—á–µ–Ω–∏—è –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (-50¬∞C –¥–æ 100¬∞C)"
                )
                return True
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            from src.core.storage import ThresholdManager
            success = await ThresholdManager.save_thresholds_async(
                context.group_name, context.device_id, min_temp, max_temp
            )
            
            if success:
                # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    await update.message.delete()
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Ä–æ–≥–∞–º–∏: {e}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
                success_text = f"‚úÖ **–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã**\n\n"
                if context.device_id == "ALL":
                    success_text += f"üè¢ –ì—Ä—É–ø–ø–∞: {context.group_name}\n"
                else:
                    success_text += f"üå°Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {context.device_id}\nüè¢ –ì—Ä—É–ø–ø–∞: {context.group_name}\n"
                success_text += f"üå°Ô∏è –ú–∏–Ω–∏–º—É–º: {min_temp}¬∞C\nüå°Ô∏è –ú–∞–∫—Å–∏–º—É–º: {max_temp}¬∞C"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                await smart_update_current_menu(
                    update, user_id, success_text, "‚úÖ —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
                )
                
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                threshold_context_manager.clear_context(user_id)
            else:
                await InputHandler._handle_invalid_content(
                    update, chat_id, text, "üí• –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
                )
            
            return True
            
        except ValueError:
            await InputHandler._handle_invalid_content(
                update, chat_id, text, "‚ùå –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏"
            )
            return True
    
    @staticmethod
    async def _handle_registration_input(update: Update, text: str, chat_id: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        step = registration_manager.get_registration_step(chat_id)
        
        if step == 'fio':
            if not validate_fio(text):
                error_msg = (
                    "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û**\n\n"
                    "–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:\n\n"
                    "üìÖ **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**\n"
                    "‚Ä¢ 3-5 —Å–ª–æ–≤ (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ)\n"
                    "‚Ä¢ –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –æ—Ç 2 –¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤\n"
                    "‚Ä¢ –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ/–∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞\n"
                    "‚Ä¢ –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã\n\n"
                    "üìù **–ü—Ä–∏–º–µ—Ä—ã:**\n"
                    "‚Ä¢ –ü—É—à–∫–∏–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á\n"
                    "‚Ä¢ –°–∞–ª—Ç—ã–∫–æ–≤-–©–µ–¥—Ä–∏–Ω –ú–∏—Ö–∞–∏–ª –ï–≤–≥—Ä–∞—Ñ–æ–≤–∏—á"
                )
                await update.message.reply_text(error_msg, parse_mode='Markdown')
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –§–ò–û –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            if registration_manager.update_fio(chat_id, text):
                from src.bot.handlers.registration_handlers import RegistrationHandler
                await RegistrationHandler.show_group_selection(update, chat_id)
        
        elif step == 'position':
            if len(text.strip()) < 2:
                error_msg = (
                    "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–∏**\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: –î–∏—Ä–µ–∫—Ç–æ—Ä, –ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞, –ú–µ–Ω–µ–¥–∂–µ—Ä"
                )
                await update.message.reply_text(error_msg, parse_mode='Markdown')
                return
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            if registration_manager.update_position(chat_id, text.strip()):
                from src.bot.handlers.registration_handlers import RegistrationHandler
                await RegistrationHandler.complete_registration(update, chat_id)
    
    @staticmethod
    async def _handle_invalid_content(update: Update, chat_id: int, _text: str, content_type: str):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º —É–º–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –º–µ–Ω—é
        """
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await update.message.delete()
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º ({content_type}) –æ—Ç {chat_id}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º: {e}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —É–º–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        content_handled = await smart_update_current_menu(
            update, 
            chat_id, 
            "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è", 
            content_type
        )
        
        if not content_handled:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é, —Å–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ—à–∏–±–∫–æ–π
            logger.warning(f"–ö–æ–Ω—Ç–µ–Ω—Ç —É–¥–∞–ª–µ–Ω, –Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            from src.bot.keyboards import get_main_keyboard
            from src.core.auth import get_user_role
            
            role = get_user_role(chat_id)
            keyboard = get_main_keyboard(role)
            
            error_message = f"‚ùå **–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è**\n\n–û–±–Ω–∞—Ä—É–∂–µ–Ω: {content_type}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
            
            try:
                await update.message.reply_text(
                    error_message,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
handle_text_input = InputHandler.handle_text_input