"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""
from telegram import Update
from telegram.ext import ContextTypes
from src.config.logging import SecureLogger
from src.core.registration_manager import registration_manager
from src.core.threshold_context_manager import threshold_context_manager
from src.utils.validators import validate_user_input, validate_fio
from src.utils.security import validate_request_security, detect_invalid_content
from src.bot.utils import smart_update_current_menu

logger = SecureLogger(__name__)


class InputHandler:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–ª–Ω—ã–º —É–º–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º
        –í–°–ï –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª—è—é—Ç—Å—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —É–º–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        """
        chat_id = update.effective_chat.id
        text = update.message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Å—Å—ã–ª–∫–∏, —Å–ø–∞–º, etc.)
        invalid_content_type = detect_invalid_content(text)
        if invalid_content_type:
            await InputHandler._handle_invalid_content(update, chat_id, text, invalid_content_type)
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å —É–º–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º
        is_safe, error_msg = validate_request_security(chat_id, text)
        if not is_safe:
            await InputHandler._handle_invalid_content(update, chat_id, text, "‚ö†Ô∏è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            return
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —É–º–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º
        if not validate_user_input(text):
            await InputHandler._handle_invalid_content(update, chat_id, text, "‚ùå –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã")
            return
        
        logger.info(f"–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        try:
            # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from src.core.auth import get_user_role
            role = get_user_role(chat_id)
            
            # –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–≤–æ–¥
            if role == "unregistered":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                if registration_manager.is_in_registration(chat_id):
                    await InputHandler._handle_registration_input(update, text, chat_id)
                    return
                else:
                    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ –§–ò–û
                    await InputHandler._handle_registration_input(update, text, chat_id)
                    return
            
            # –ü–†–ò–û–†–ò–¢–ï–¢ 3: –î–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            threshold_handled = await InputHandler._handle_threshold_input(update, text, chat_id)
            if threshold_handled:
                return
            
            # –ü–†–ò–û–†–ò–¢–ï–¢ 4: –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π = –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            await InputHandler._handle_invalid_content(update, chat_id, text, "üìù –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç {chat_id}: {e}")
            await InputHandler._handle_invalid_content(update, chat_id, text, "üí• —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞")
    
    @staticmethod
    async def _handle_threshold_input(update: Update, text: str, chat_id: int) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        
        Returns:
            True –µ—Å–ª–∏ –≤–≤–æ–¥ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–∫ –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        """
        user_id = update.effective_user.id
        context = threshold_context_manager.get_context(user_id)
        
        if not context:
            return False
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç "–º–∏–Ω –º–∞–∫—Å"
        parts = text.strip().split()
        if len(parts) != 2:
            await InputHandler._handle_invalid_content(
                update, chat_id, text, "‚ùå –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–Ω—É–∂–Ω–æ: –º–∏–Ω –º–∞–∫—Å)"
            )
            return True
        
        try:
            min_temp = float(parts[0])
            max_temp = float(parts[1])
            
            if min_temp >= max_temp:
                await InputHandler._handle_invalid_content(
                    update, chat_id, text, "‚ùå –º–∏–Ω–∏–º—É–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞"
                )
                return True
            
            if min_temp < -50 or max_temp > 100:
                await InputHandler._handle_invalid_content(
                    update, chat_id, text, "‚ùå –∑–Ω–∞—á–µ–Ω–∏—è –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (-50¬∞C –¥–æ 100¬∞C)"
                )
                return True
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            from src.core.storage import ThresholdManager
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
            if context.action == 'set_threshold_user_sensors':
                # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –º–∞—Å—Å–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                from src.core.auth import get_user_accessible_groups
                from src.core.monitoring import get_sensors_by_group
                
                user_groups = get_user_accessible_groups(chat_id)
                total_sensors = 0
                
                # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Ä–æ–≥–∏ –û–î–ò–ù —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                thresholds = ThresholdManager.load_thresholds()
                
                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏
                for group in user_groups:
                    sensors = get_sensors_by_group(group)
                    total_sensors += len(sensors)
                    
                    # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –≤ thresholds –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                    if group not in thresholds:
                        thresholds[group] = {}
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥–∏ –¥–ª—è –≤—Å–µ—Ö –¥–∞—Ç—á–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
                    for sensor in sensors:
                        sensor_device_id = sensor['device_id']
                        thresholds[group][sensor_device_id] = {
                            "min": min_temp,
                            "max": max_temp
                        }
                
                # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä–æ–≥–∏ –û–î–ò–ù —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
                success = ThresholdManager.save_thresholds(thresholds)
                total_updated = total_sensors if success else 0
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–µ—à –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                if success:
                    from src.core.monitoring import invalidate_threshold_cache
                    invalidate_threshold_cache()
                
                success_text = f"üîß **–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –≤–∞—à–∏—Ö –¥–∞—Ç—á–∏–∫–æ–≤!**\n\n"
                success_text += f"üå°Ô∏è –ú–∏–Ω–∏–º—É–º: {min_temp}¬∞C\n"
                success_text += f"üå°Ô∏è –ú–∞–∫—Å–∏–º—É–º: {max_temp}¬∞C\n"
                success_text += f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–∞—Ç—á–∏–∫–æ–≤: {total_updated}/{total_sensors}\n"
                success_text += f"üìç –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ –≥—Ä—É–ø–ø: {', '.join(user_groups)} ({len(user_groups)})"
            
            elif context.action == 'set_threshold_all_sensors':
                # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –º–∞—Å—Å–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è –í–°–ï–• –¥–∞—Ç—á–∏–∫–æ–≤ –í–°–ï–• –≥—Ä—É–ø–ø (—Ç–æ–ª—å–∫–æ big_boss)
                from src.core.monitoring import get_all_groups, get_sensors_by_group
                
                all_groups = get_all_groups()
                total_sensors = 0
                
                # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Ä–æ–≥–∏ –û–î–ò–ù —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                thresholds = ThresholdManager.load_thresholds()
                
                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏
                for group in all_groups:
                    sensors = get_sensors_by_group(group)
                    total_sensors += len(sensors)
                    
                    # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –≤ thresholds –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                    if group not in thresholds:
                        thresholds[group] = {}
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥–∏ –¥–ª—è –≤—Å–µ—Ö –¥–∞—Ç—á–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
                    for sensor in sensors:
                        sensor_device_id = sensor['device_id']
                        thresholds[group][sensor_device_id] = {
                            "min": min_temp,
                            "max": max_temp
                        }
                
                # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä–æ–≥–∏ –û–î–ò–ù —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
                success = ThresholdManager.save_thresholds(thresholds)
                total_updated = total_sensors if success else 0
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–µ—à –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                if success:
                    from src.core.monitoring import invalidate_threshold_cache
                    invalidate_threshold_cache()
                
                success_text = f"üåç **–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –í–°–ï–• –¥–∞—Ç—á–∏–∫–æ–≤ —Å–∏—Å—Ç–µ–º—ã!**\n\n"
                success_text += f"üå°Ô∏è –ú–∏–Ω–∏–º—É–º: {min_temp}¬∞C\n"
                success_text += f"üå°Ô∏è –ú–∞–∫—Å–∏–º—É–º: {max_temp}¬∞C\n"
                success_text += f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–∞—Ç—á–∏–∫–æ–≤: {total_updated}/{total_sensors}\n"
                success_text += f"üìç –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ –≥—Ä—É–ø–ø: {', '.join(all_groups)} ({len(all_groups)})"
            
            elif context.action == 'set_threshold_group':
                # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–æ–≤ –¥–ª—è –í–°–ï–• –¥–∞—Ç—á–∏–∫–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
                from src.core.monitoring import get_sensors_by_group
                
                group_sensors = get_sensors_by_group(context.group_name)
                
                # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Ä–æ–≥–∏ –û–î–ò–ù —Ä–∞–∑
                thresholds = ThresholdManager.load_thresholds()
                
                # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –≤ thresholds –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                if context.group_name not in thresholds:
                    thresholds[context.group_name] = {}
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥–∏ –¥–ª—è –≤—Å–µ—Ö –¥–∞—Ç—á–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –≤ –ø–∞–º—è—Ç–∏
                for sensor in group_sensors:
                    sensor_device_id = sensor['device_id']
                    thresholds[context.group_name][sensor_device_id] = {
                        "min": min_temp,
                        "max": max_temp
                    }
                
                # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä–æ–≥–∏ –û–î–ò–ù —Ä–∞–∑
                success = ThresholdManager.save_thresholds(thresholds)
                total_updated = len(group_sensors) if success else 0
                
                success_text = f"‚úÖ **–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –≥—Ä—É–ø–ø—ã {context.group_name}**\n\n"
                success_text += f"üå°Ô∏è –ú–∏–Ω–∏–º—É–º: {min_temp}¬∞C\n"
                success_text += f"üå°Ô∏è –ú–∞–∫—Å–∏–º—É–º: {max_temp}¬∞C\n"
                success_text += f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–∞—Ç—á–∏–∫–æ–≤: {total_updated}/{len(group_sensors)}"
            
            else:
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞ (set_threshold_device)
                success = ThresholdManager.set_device_threshold(
                    context.device_id, context.group_name, min_temp, max_temp
                )
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–µ—à –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                if success:
                    from src.core.monitoring import invalidate_threshold_cache
                    invalidate_threshold_cache()
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –≤ device_id –¥–ª—è Markdown
                safe_device_id = context.device_id.replace('_', '\\_')
                success_text = f"‚úÖ **–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã**\n\n"
                success_text += f"üå°Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {safe_device_id}\n"
                success_text += f"üè¢ –ì—Ä—É–ø–ø–∞: {context.group_name}\n"
                success_text += f"üå°Ô∏è –ú–∏–Ω–∏–º—É–º: {min_temp}¬∞C\n"
                success_text += f"üå°Ô∏è –ú–∞–∫—Å–∏–º—É–º: {max_temp}¬∞C"
            
            if success:
                # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    await update.message.delete()
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Ä–æ–≥–∞–º–∏: {e}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                user_id = update.effective_user.id
                back_callback = "settings_thresholds"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                if context.action == 'set_threshold_device':
                    back_callback = f"change_threshold_{context.group_name}"
                    back_text = "üîô –ù–∞–∑–∞–¥ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º"
                elif context.action == 'set_threshold_group':
                    back_callback = f"change_threshold_{context.group_name}"
                    back_text = "üîô –ù–∞–∑–∞–¥ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º"
                elif context.action in ['set_threshold_user_sensors', 'set_threshold_all_sensors']:
                    back_callback = "settings_thresholds"
                    back_text = "üîô –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º"
                else:
                    back_callback = "settings_thresholds"
                    back_text = "üîô –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –æ–± —É—Å–ø–µ—Ö–µ
                from telegram import InlineKeyboardButton, InlineKeyboardMarkup
                
                keyboard = [[InlineKeyboardButton(back_text, callback_data=back_callback)]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –º–µ–Ω—é –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞–ø—Ä—è–º—É—é
                try:
                    bot = update.get_bot()
                    await bot.edit_message_text(
                        chat_id=context.chat_id,
                        message_id=context.message_id,
                        text=success_text,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—Å–ø–µ—Ö–æ–º: {e}")
                    # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    await smart_update_current_menu(
                        update, chat_id, success_text, "‚úÖ —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
                    )
                
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                threshold_context_manager.clear_context(user_id)
            else:
                await InputHandler._handle_invalid_content(
                    update, chat_id, text, "üí• –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
                )
            
            return True
            
        except ValueError:
            await InputHandler._handle_invalid_content(
                update, chat_id, text, "‚ùå –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏"
            )
            return True
    
    @staticmethod
    async def _handle_registration_input(update: Update, text: str, chat_id: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å–±—Ä–æ—Å–∞ –ü–ï–†–í–´–ú –¥–µ–ª–æ–º
        if text.lower().strip() == "—Å–±—Ä–æ—Å":
            from src.bot.handlers.registration_handlers import RegistrationHandler
            await RegistrationHandler.handle_registration_reset(update, chat_id, text)
            return
            
        step = registration_manager.get_registration_step(chat_id)
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –Ω–∞—á–∏–Ω–∞–µ–º —Å –≤–≤–æ–¥–∞ –§–ò–û
        if not step:
            step = 'fio'
            registration_manager.start_registration(chat_id)
        
        if step == 'fio':
            if not validate_fio(text):
                error_msg = (
                    "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û**\n\n"
                    "–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:\n\n"
                    "üìÖ **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**\n"
                    "‚Ä¢ 3-5 —Å–ª–æ–≤ (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ)\n"
                    "‚Ä¢ –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –æ—Ç 2 –¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤\n"
                    "‚Ä¢ –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ/–∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞\n"
                    "‚Ä¢ –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã\n"
                    "‚Ä¢ –ù–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–µ –±–µ—Å—Å–º—ã—Å–ª–∏—Ü–∞\n\n"
                    "üìù **–ü—Ä–∏–º–µ—Ä—ã:**\n"
                    "‚Ä¢ –ü—É—à–∫–∏–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á\n"
                    "‚Ä¢ –°–∞–ª—Ç—ã–∫–æ–≤-–©–µ–¥—Ä–∏–Ω –ú–∏—Ö–∞–∏–ª –ï–≤–≥—Ä–∞—Ñ–æ–≤–∏—á\n"
                    "‚Ä¢ –ì—é–≥–æ –í–∏–∫—Ç–æ—Ä-–ú–∞—Ä–∏ –ñ–æ–∑–µ—Ñ–æ–≤–∏—á\n"
                    "‚Ä¢ –¢–æ–ª–∫–∏–Ω –î–∂–æ–Ω –†–æ–Ω–∞–ª—å–¥ –†—É—ç–ª\n"
                    "‚Ä¢ –ú–∞–∫–∏–∞–≤–µ–ª–ª–∏ –ù–∏–∫–∫–æ–ª–æ –î–∏ –ë–µ—Ä–Ω–∞—Ä–¥–æ –î–µ–∏"
                )
                await update.message.reply_text(error_msg, parse_mode='Markdown')
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –§–ò–û –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            if registration_manager.update_fio(chat_id, text):
                from src.bot.handlers.registration_handlers import RegistrationHandler
                await RegistrationHandler.show_group_selection(update, chat_id)
        
        elif step == 'position':
            if len(text.strip()) < 2:
                error_msg = (
                    "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–∏**\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: –î–∏—Ä–µ–∫—Ç–æ—Ä, –ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞, –ú–µ–Ω–µ–¥–∂–µ—Ä"
                )
                await update.message.reply_text(error_msg, parse_mode='Markdown')
                return
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            if registration_manager.update_position(chat_id, text.strip()):
                from src.bot.handlers.registration_handlers import RegistrationHandler
                await RegistrationHandler.complete_registration(update, chat_id)
    
    @staticmethod
    async def _handle_invalid_content(update: Update, chat_id: int, _text: str, content_type: str):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º —É–º–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –º–µ–Ω—é
        """
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await update.message.delete()
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º ({content_type}) –æ—Ç {chat_id}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º: {e}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —É–º–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        content_handled = await smart_update_current_menu(
            update, 
            chat_id, 
            "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è", 
            content_type
        )
        
        if not content_handled:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.warning(f"–ö–æ–Ω—Ç–µ–Ω—Ç —É–¥–∞–ª–µ–Ω, –Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            from src.bot.keyboards import get_main_keyboard
            from src.core.auth import get_user_role
            
            role = get_user_role(chat_id)
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            if role == "unregistered":
                from src.bot.messages import format_welcome_message
                
                welcome_message = format_welcome_message(is_new_user=True, chat_id=chat_id)
                
                try:
                    await update.message.reply_text(
                        welcome_message,
                        parse_mode='Markdown'
                    )
                    logger.info(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                # –î–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                keyboard = get_main_keyboard(role)
                error_message = f"‚ùå **–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è**\n\n–û–±–Ω–∞—Ä—É–∂–µ–Ω: {content_type}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
                
                try:
                    await update.message.reply_text(
                        error_message,
                        reply_markup=keyboard,
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
handle_text_input = InputHandler.handle_text_input