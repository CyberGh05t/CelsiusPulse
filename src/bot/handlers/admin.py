"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
"""
import re
from telegram import Update
from telegram.ext import ContextTypes
from ...config.logging import SecureLogger
from ...core.auth import get_user_role, add_user_to_group, update_env_file
from ...core.storage import AdminManager
from ...core.monitoring import get_all_groups
from ...bot.messages import format_welcome_message, format_error_message
from ...bot.keyboards import get_main_keyboard
from ...utils.security import validate_request_security
from ...utils.validators import validate_user_input

logger = SecureLogger(__name__)


async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    """
    chat_id = update.effective_chat.id
    text = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    is_safe, error_msg = validate_request_security(chat_id, text)
    if not is_safe:
        await update.message.reply_text(format_error_message('rate_limited', error_msg))
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not validate_user_input(text):
        await update.message.reply_text(
            format_error_message('invalid_input', '–°–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã')
        )
        return
    
    logger.info(f"–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        threshold_handled = await handle_threshold_input(update, text, chat_id)
        if threshold_handled:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        admin_info = AdminManager.load_admin_info(chat_id)
        
        if not admin_info or 'fio' not in admin_info:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å–±—Ä–æ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¢–û–õ–¨–ö–û –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            if text.lower().strip() in ['—Å–±—Ä–æ—Å', 'reset', '–æ—Ç–º–µ–Ω–∞', 'cancel']:
                await handle_registration_reset(update, chat_id)
                return
            
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            await handle_user_registration(update, text, chat_id)
        else:
            # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
            await update.message.reply_text(
                "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç {chat_id}: {e}")
        await update.message.reply_text(
            format_error_message('system_error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è')
        )


async def handle_user_registration(update: Update, text: str, chat_id: int):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ context.user_data
    context = update.callback_query.get_bot().application.user_data.get(chat_id, {}) if hasattr(update, 'callback_query') and update.callback_query else {}
    if not context:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if not hasattr(handle_user_registration, 'temp_storage'):
            handle_user_registration.temp_storage = {}
        context = handle_user_registration.temp_storage.get(chat_id, {})
    registration_step = context.get('registration_step', 'fio')
    
    logger.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}, —à–∞–≥: {registration_step}")
    
    if registration_step == 'fio':
        # –®–∞–≥ 1: –í–≤–æ–¥ –§–ò–û
        if not validate_fio(text):
            await update.message.reply_text(
                "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û**\n\n"
                "–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:\n\n"
                "üìÖ **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**\n"
                "‚Ä¢ 3-5 —Å–ª–æ–≤ (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ)\n"
                "‚Ä¢ –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –æ—Ç 2 –¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤\n"
                "‚Ä¢ –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ/–∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞\n"
                "‚Ä¢ –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã\n"
                "‚Ä¢ –ù–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–µ –±–µ—Å—Å–º—ã—Å–ª–∏—Ü–∞\n\n"
                "üìù **–ü—Ä–∏–º–µ—Ä—ã:**\n"
                "‚Ä¢ –ü—É—à–∫–∏–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á\n"
                "‚Ä¢ –°–∞–ª—Ç—ã–∫–æ–≤-–©–µ–¥—Ä–∏–Ω –ú–∏—Ö–∞–∏–ª –ï–≤–≥—Ä–∞—Ñ–æ–≤–∏—á\n"
                "‚Ä¢ –ì—é–≥–æ –í–∏–∫—Ç–æ—Ä-–ú–∞—Ä–∏ –ñ–æ–∑–µ—Ñ–æ–≤–∏—á\n"
                "‚Ä¢ –¢–æ–ª–∫–∏–Ω –î–∂–æ–Ω –†–æ–Ω–∞–ª—å–¥ –†—É—ç–ª\n"
                "‚Ä¢ –ú–∞–∫–∏–∞–≤–µ–ª–ª–∏ –ù–∏–∫–∫–æ–ª–æ –î–∏ –ë–µ—Ä–Ω–∞—Ä–¥–æ –î–µ–∏\n",
                parse_mode='Markdown'
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ä–µ–≥–∏–æ–Ω–∞
        context['fio'] = text.strip()
        context['registration_step'] = 'region'
        context['selected_groups'] = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if not hasattr(handle_user_registration, 'temp_storage'):
            handle_user_registration.temp_storage = {}
        handle_user_registration.temp_storage[chat_id] = context
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤
        await show_region_selection(update, chat_id)
        
    elif registration_step == 'position':
        # –®–∞–≥ 3: –í–≤–æ–¥ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        if not validate_position(text):
            await update.message.reply_text(
                "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–∏**\n\n"
                "üìÖ **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**\n"
                "‚Ä¢ –û—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤\n"
                "‚Ä¢ 1-4 –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞\n"
                "‚Ä¢ –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã, —Ç–æ—á–∫–∏, —Å–∫–æ–±–∫–∏\n"
                "‚Ä¢ –ù–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–µ –±–µ—Å—Å–º—ã—Å–ª–∏—Ü–∞\n\n"
                "üìù **–ü—Ä–∏–º–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π:**\n"
                "‚Ä¢ –î–∏—Ä–µ–∫—Ç–æ—Ä\n"
                "‚Ä¢ –ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞\n"
                "‚Ä¢ –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å\n"
                "‚Ä¢ –ë—Ä–∏–≥–∞–¥–∏—Ä\n\n"
                "üìù –í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∑–∞–Ω–æ–≤–æ:",
                parse_mode='Markdown'
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if not validate_registration_context(context, 'position'):
            await update.message.reply_text(
                "‚ùå **–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏**\n\n"
                "–î–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start",
                parse_mode='Markdown'
            )
            # –û—á–∏—â–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if hasattr(handle_user_registration, 'temp_storage'):
                handle_user_registration.temp_storage.pop(chat_id, None)
            return
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        context['position'] = text.strip()
        handle_user_registration.temp_storage[chat_id] = context
        await complete_registration(update, chat_id, context)
    
    else:
        await update.message.reply_text(
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ù–∞—á–Ω–∏—Ç–µ —Å /start"
        )


async def handle_registration_reset(update: Update, chat_id: int):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–±—Ä–æ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    logger.info(f"–°–±—Ä–æ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if hasattr(handle_user_registration, 'temp_storage'):
        handle_user_registration.temp_storage.pop(chat_id, None)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–±—Ä–æ—Å–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
    from ...bot.messages import format_welcome_message
    
    await update.message.reply_text(
        "üîÑ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞**\n\n"
        "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ:",
        parse_mode='Markdown'
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_message = format_welcome_message(is_new_user=True, chat_id=chat_id)
    await update.message.reply_text(welcome_message, parse_mode='Markdown')


async def show_region_selection(update: Update, chat_id: int):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    """
    from ...core.monitoring import get_all_groups
    from ...bot.keyboards import get_registration_groups_keyboard
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
    if not hasattr(handle_user_registration, 'temp_storage'):
        handle_user_registration.temp_storage = {}
    context = handle_user_registration.temp_storage.get(chat_id, {})
    selected_groups = context.get('selected_groups', [])
    
    available_groups = get_all_groups()
    keyboard = get_registration_groups_keyboard(available_groups, selected_groups)
    
    message_text = "üó∫Ô∏è **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω(—ã):**\n\n"
    if selected_groups:
        message_text += f"‚úÖ –£–∂–µ –≤—ã–±—Ä–∞–Ω–æ: {', '.join(selected_groups)}\n\n"
    message_text += "üí° –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–≥–∏–æ–Ω–æ–≤"
    
    await update.message.reply_text(
        message_text,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )


async def complete_registration(update: Update, chat_id: int, context: dict):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ big_boss
    """
    fio = context.get('fio')
    selected_groups = context.get('selected_groups', [])
    position = context.get('position')
    
    logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {fio}")
    
    try:
        # –ù–ï –°–û–•–†–ê–ù–Ø–ï–ú –¥–∞–Ω–Ω—ã–µ –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è! –¢–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        await send_registration_request_to_big_boss(update, chat_id, fio, selected_groups, position)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        groups_text = ', '.join(selected_groups) if selected_groups else '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'
        await update.message.reply_text(
            "‚úÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
            f"üë§ –§–ò–û: {fio}\n"
            f"üó∫Ô∏è –†–µ–≥–∏–æ–Ω(—ã): {groups_text}\n"
            f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}\n\n"
            "‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—à–µ–Ω–∏–∏.",
            parse_mode='Markdown'
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if hasattr(handle_user_registration, 'temp_storage'):
            handle_user_registration.temp_storage.pop(chat_id, None)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {chat_id}: {e}")
        await update.message.reply_text(
            format_error_message('system_error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
        )


async def send_registration_request_to_big_boss(update: Update, chat_id: int, fio: str, selected_groups: list, position: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º—É big_boss
    """
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    import os
    import uuid
    
    # –ü–æ–ª—É—á–∞–µ–º ID —É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω–æ–≥–æ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é Big Boss –∏–∑ .env
    approver_id = os.getenv('REGISTRATION_APPROVER_ID')
    if not approver_id:
        logger.error("REGISTRATION_APPROVER_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ")
        raise ValueError("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω—ã–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    
    try:
        approver_chat_id = int(approver_id)
    except ValueError:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç REGISTRATION_APPROVER_ID: {approver_id}")
        raise ValueError("REGISTRATION_APPROVER_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    
    groups_text = ', '.join(selected_groups) if selected_groups else '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è callback_data
    registration_id = str(uuid.uuid4())[:8]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    if not hasattr(send_registration_request_to_big_boss, '_pending_registrations'):
        send_registration_request_to_big_boss._pending_registrations = {}
    
    send_registration_request_to_big_boss._pending_registrations[registration_id] = {
        'chat_id': chat_id,
        'fio': fio,
        'groups': selected_groups,
        'position': position
    }
    
    request_message = (
        "üÜï **–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–Æ**\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {fio}\n"
        f"üÜî Chat ID: `{chat_id}`\n"
        f"üó∫Ô∏è –†–µ–≥–∏–æ–Ω(—ã): {groups_text}\n"
        f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}\n"
        f"üìÖ –î–∞—Ç–∞: {update.message.date.strftime('%d.%m.%Y %H:%M')}"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_reg:{registration_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_reg:{registration_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        bot = update.get_bot()
        sent_message = await bot.send_message(
            chat_id=approver_chat_id,
            text=request_message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–∞–∂–Ω–æ—Å—Ç–∏
        await bot.pin_chat_message(
            chat_id=approver_chat_id,
            message_id=sent_message.message_id
        )
        
        logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é {chat_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω–æ–º—É big_boss {approver_chat_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω–æ–º—É big_boss: {e}")


def get_pending_registration(registration_id: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–∂–∏–¥–∞—é—â–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ ID"""
    if hasattr(send_registration_request_to_big_boss, '_pending_registrations'):
        return send_registration_request_to_big_boss._pending_registrations.get(registration_id)
    return None


def remove_pending_registration(registration_id: str):
    """–£–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–∂–∏–¥–∞—é—â–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ ID"""
    if hasattr(send_registration_request_to_big_boss, '_pending_registrations'):
        send_registration_request_to_big_boss._pending_registrations.pop(registration_id, None)


def validate_fio(fio: str) -> bool:
    """
    –£—Å–∏–ª–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –§–ò–û —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    if not fio or not isinstance(fio, str):
        return False
    
    fio = fio.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if len(fio) < 5 or len(fio) > 100:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    fio_lower = fio.lower()
    
    # –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (—Ç–µ—Å—Ç, —Å–ø–∞–º, –±–µ—Å—Å–º—ã—Å–ª–∏—Ü–∞)
    suspicious_patterns = [
        r'test', r'—Ç–µ—Å—Ç', r'spam', r'—Å–ø–∞–º', r'fake', r'—Ñ–µ–π–∫',
        r'admin', r'–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', r'root', r'user', r'—é–∑–µ—Ä',
        r'qwerty', r'asdf', r'123', r'111', r'000',
        r'aaa+', r'–∞–∞–∞+', r'xxx', r'—ã—ã—ã+',  # –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
        r'([a-z–∞-—è])\1{3,}',  # 4+ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞ –ø–æ–¥—Ä—è–¥
        r'^[a-z–∞-—è]{1,2}\s[a-z–∞-—è]{1,2}\s[a-z–∞-—è]{1,2}$'  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —á–∞—Å—Ç–∏
    ]
    
    for pattern in suspicious_patterns:
        if re.search(pattern, fio_lower):
            return False
    
    words = fio.split()
    
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 3-5 —Å–ª–æ–≤ (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ [–í—Ç–æ—Ä–æ–µ –∏–º—è] [–ü—Ä–∏—Å—Ç–∞–≤–∫–∞])
    if len(words) < 3 or len(words) > 5:
        return False
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞
    for i, word in enumerate(words):
        if not word or len(word) < 2 or len(word) > 15:
            return False
        
        # –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, –¥–µ—Ñ–∏—Å—ã –∏ –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã
        if not re.match(r'^[–ê-–Ø–∞-—è–Å—ëA-Za-z\-\']+$', word):
            return False
        
        # –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
        if not word[0].isupper():
            return False
        
        # –°–ª–æ–≤–æ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –¥–µ—Ñ–∏—Å–æ–≤/–∞–ø–æ—Å—Ç—Ä–æ—Ñ–æ–≤
        if word.replace('-', '').replace("'", '') == '':
            return False
        
        # –ü–µ—Ä–≤—ã–µ 3 —Å–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–º–∏
        if i < 3 and len(word) < 2:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã –≤ —Å–ª–æ–≤–µ
        if re.search(r'([–∞-—è—ë])\1{2,}', word.lower()) or re.search(r'([a-z])\1{2,}', word.lower()):
            return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–µ 3 —Å–ª–æ–≤–∞ —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è
    if len(set(w.lower() for w in words[:3])) < 3:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç—å (–Ω–µ –≤—Å–µ —Å–ª–æ–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã)
    word_lengths = [len(w) for w in words]
    if len(set(word_lengths)) == 1 and len(words) >= 3:
        return False
    
    return True


def validate_position(position: str) -> bool:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    if not position or not isinstance(position, str):
        return False
    
    position = position.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if len(position) < 2 or len(position) > 50:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    position_lower = position.lower()
    
    # –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    suspicious_patterns = [
        r'^test', r'^—Ç–µ—Å—Ç', r'^spam', r'^—Å–ø–∞–º', r'^fake', r'^—Ñ–µ–π–∫',
        r'qwerty', r'asdf', r'123456', r'admin', r'user',
        r'aaa+', r'–∞–∞–∞+', r'xxx', r'—ã—ã—ã+',
        r'([a-z–∞-—è])\1{3,}',  # 4+ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞ –ø–æ–¥—Ä—è–¥
        r'^[a-z–∞-—è]{1,2}$',  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ (1-2 —Å–∏–º–≤–æ–ª–∞)
        r'^\d+$',  # –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        r'^[\-\.\(\)\s]+$'  # –¢–æ–ª—å–∫–æ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
    ]
    
    for pattern in suspicious_patterns:
        if re.search(pattern, position_lower):
            return False
    
    # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã, —Ç–æ—á–∫–∏, —Å–∫–æ–±–∫–∏
    if not re.match(r'^[–ê-–Ø–∞-—è–Å—ëA-Za-z0-9\s\-\.\(\)]+$', position):
        return False
    
    # –î–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É –±—É–∫–≤—É
    if not re.search(r'[–ê-–Ø–∞-—è–Å—ëA-Za-z]', position):
        return False
    
    # –ù–µ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
    if re.match(r'^[\s\-\.\(\)0-9]+$', position):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—É–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ (1-4 —Å–ª–æ–≤–∞)
    words = position.split()
    if len(words) == 0 or len(words) > 4:
        return False
    
    # –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º
    for word in words:
        if len(word) < 2 and word not in ['–∏', '–≤', '–ø–æ', '–Ω–∞', '–æ—Ç', '–∫']:
            return False
    
    return True


def validate_registration_context(context: dict, required_step: str) -> bool:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    """
    if not context or not isinstance(context, dict):
        return False
    
    current_step = context.get('registration_step')
    if current_step != required_step:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
    if required_step == 'region' and not context.get('fio'):
        return False
    elif required_step == 'position' and (not context.get('fio') or not context.get('selected_groups')):
        return False
    
    return True


def parse_registration_data(text: str) -> tuple[str, str] | None:
    """
    –ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    
    Args:
        text: –¢–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        
    Returns:
        –ö–æ—Ä—Ç–µ–∂ (–§–ò–û, –¥–æ–ª–∂–Ω–æ—Å—Ç—å) –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = re.sub(r'\s+', ' ', text.strip())
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –∑–∞–ø—è—Ç–æ–π
    if ',' in text:
        parts = text.split(',', 1)
        if len(parts) == 2:
            fio = parts[0].strip()
            position = parts[1].strip()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –§–ò–û (–º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞)
            if len(fio.split()) < 2:
                return None
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ (–Ω–µ –ø—É—Å—Ç–∞—è)
            if not position:
                return None
            
            return fio, position
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø—Ä–æ–±–µ–ª—É (–µ—Å–ª–∏ –º–Ω–æ–≥–æ —Å–ª–æ–≤)
    words = text.split()
    if len(words) >= 3:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ - –¥–æ–ª–∂–Ω–æ—Å—Ç—å
        fio = ' '.join(words[:-1])
        position = words[-1]
        return fio, position
    
    return None


async def handle_threshold_input(update: Update, text: str, chat_id: int) -> bool:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    
    Returns:
        True –µ—Å–ª–∏ –≤–≤–æ–¥ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–∫ –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    """
    from ...bot.handlers.callbacks import handle_set_threshold_device
    from ...core.storage import ThresholdManager
    from ...core.auth import can_access_group
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    temp_storage = getattr(handle_set_threshold_device, 'temp_storage', {})
    context = temp_storage.get(chat_id)
    
    if not context:
        return False
    
    action = context.get('action')
    group_name = context.get('group_name')
    device_id = context.get('device_id')
    
    if not action or not group_name:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ
    if not can_access_group(chat_id, group_name):
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ")
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        temp_storage.pop(chat_id, None)
        return True
    
    # –ü–∞—Ä—Å–∏–º –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–º–∏–Ω –º–∞–∫—Å"
    try:
        parts = text.strip().split()
        if len(parts) != 2:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `–º–∏–Ω –º–∞–∫—Å`\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: `18 25`",
                parse_mode='Markdown'
            )
            return True
        
        min_temp = float(parts[0])
        max_temp = float(parts[1])
        
        if min_temp >= max_temp:
            await update.message.reply_text("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π")
            return True
        
        if min_temp < -50 or max_temp > 100:
            await update.message.reply_text("‚ùå –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç -50¬∞C –¥–æ 100¬∞C")
            return True
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        success = False
        
        if action == 'set_threshold_group' and device_id == 'ALL':
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥–∏ –¥–ª—è –≤—Å–µ–π –≥—Ä—É–ø–ø—ã
            from ...core.monitoring import get_sensors_by_group
            sensors = get_sensors_by_group(group_name)
            success_count = 0
            
            for sensor in sensors:
                sensor_device_id = sensor['device_id']
                if ThresholdManager.set_device_threshold(sensor_device_id, group_name, min_temp, max_temp):
                    success_count += 1
            
            success = success_count > 0
            
            if success:
                await update.message.reply_text(
                    f"‚úÖ **–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}**\n\n"
                    f"üå°Ô∏è –ú–∏–Ω–∏–º—É–º: {min_temp}¬∞C\n"
                    f"üå°Ô∏è –ú–∞–∫—Å–∏–º—É–º: {max_temp}¬∞C\n"
                    f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {success_count}/{len(sensors)}"
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
            
        elif action == 'set_threshold_device':
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            success = ThresholdManager.set_device_threshold(device_id, group_name, min_temp, max_temp)
            
            if success:
                await update.message.reply_text(
                    f"‚úÖ **–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {device_id}**\n\n"
                    f"üè¢ –ì—Ä—É–ø–ø–∞: {group_name}\n"
                    f"üå°Ô∏è –ú–∏–Ω–∏–º—É–º: {min_temp}¬∞C\n"
                    f"üå°Ô∏è –ú–∞–∫—Å–∏–º—É–º: {max_temp}¬∞C"
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        temp_storage.pop(chat_id, None)
        
        logger.info(f"–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {chat_id}: {group_name}/{device_id} = {min_temp}-{max_temp}")
        return True
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `–º–∏–Ω –º–∞–∫—Å`\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `18.5 25.0`",
            parse_mode='Markdown'
        )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç {chat_id}: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
        temp_storage.pop(chat_id, None)
        return True