"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
"""
import re
from telegram import Update
from telegram.ext import ContextTypes
from src.config.logging import SecureLogger
from src.core.auth import get_user_role, add_user_to_group, update_env_file
from src.core.storage import AdminManager
from src.core.monitoring import get_all_groups
from src.core.registration_manager import registration_manager
from src.core.threshold_context_manager import threshold_context_manager
from src.services.bot_service import BotService
from src.bot.messages import format_welcome_message, format_error_message
from src.bot.keyboards import get_main_keyboard, get_quick_main_keyboard, get_persistent_keyboard
from src.bot.utils import reply_with_keyboard, send_message_with_persistent_keyboard
from src.utils.security import validate_request_security
from src.utils.validators import validate_user_input

logger = SecureLogger(__name__)

# –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏:
# - src.bot.handlers.input_handlers - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
# - src.bot.handlers.registration_handlers - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
# - src.services.bot_service - –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
# –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ –±—É–¥–µ—Ç –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω


async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –Ω–æ–≤—ã–π InputHandler
    
    DEPRECATED: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ src.bot.handlers.input_handlers.InputHandler.handle_text_input
    """
    from src.bot.handlers.input_handlers import InputHandler
    return await InputHandler.handle_text_input(update, context)


# –£–°–¢–ê–†–ï–õ–û: –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def handle_user_registration(update: Update, text: str, chat_id: int):
    """–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –Ω–∞ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    from src.bot.handlers.input_handlers import handle_registration_input
    await handle_registration_input(update, text, chat_id)

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å—Ç–∞—Ä—ã—Ö callback'–æ–≤
handle_user_registration.temp_storage = {}


async def handle_registration_reset(update: Update, chat_id: int):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–±—Ä–æ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    logger.info(f"–°–±—Ä–æ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if hasattr(handle_user_registration, 'temp_storage'):
        handle_user_registration.temp_storage.pop(chat_id, None)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–±—Ä–æ—Å–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
    from src.bot.messages import format_welcome_message
    
    # –ü—Ä–∏ —Å–±—Ä–æ—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await update.message.reply_text(
        "üîÑ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞**\n\n"
        "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ:",
        parse_mode='Markdown'
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    welcome_message = format_welcome_message(is_new_user=True, chat_id=chat_id)
    await update.message.reply_text(welcome_message, parse_mode='Markdown')


async def show_region_selection(update: Update, chat_id: int):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    """
    from src.core.monitoring import get_all_groups
    from src.bot.keyboards import get_registration_groups_keyboard
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
    if not hasattr(handle_user_registration, 'temp_storage'):
        handle_user_registration.temp_storage = {}
    context = handle_user_registration.temp_storage.get(chat_id, {})
    selected_groups = context.get('selected_groups', [])
    
    available_groups = get_all_groups()
    keyboard = get_registration_groups_keyboard(available_groups, selected_groups)
    
    message_text = "üó∫Ô∏è **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω(—ã):**\n\n"
    if selected_groups:
        message_text += f"‚úÖ –£–∂–µ –≤—ã–±—Ä–∞–Ω–æ: {', '.join(selected_groups)}\n\n"
    message_text += "üí° –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–≥–∏–æ–Ω–æ–≤"
    
    # –í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é!
    await update.message.reply_text(
        message_text,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )



async def send_registration_request_to_big_boss(update: Update, chat_id: int, fio: str, selected_groups: list, position: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º—É big_boss
    """
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    import os
    import uuid
    
    # –ü–æ–ª—É—á–∞–µ–º ID —É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω–æ–≥–æ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é Big Boss –∏–∑ .env
    approver_id = os.getenv('REGISTRATION_APPROVER_ID')
    if not approver_id:
        logger.error("REGISTRATION_APPROVER_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ")
        raise ValueError("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω—ã–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    
    try:
        approver_chat_id = int(approver_id)
    except ValueError:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç REGISTRATION_APPROVER_ID: {approver_id}")
        raise ValueError("REGISTRATION_APPROVER_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    
    groups_text = ', '.join(selected_groups) if selected_groups else '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è callback_data
    registration_id = str(uuid.uuid4())[:8]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    if not hasattr(send_registration_request_to_big_boss, '_pending_registrations'):
        send_registration_request_to_big_boss._pending_registrations = {}
    
    send_registration_request_to_big_boss._pending_registrations[registration_id] = {
        'chat_id': chat_id,
        'fio': fio,
        'groups': selected_groups,
        'position': position
    }
    
    request_message = (
        "üÜï **–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–Æ**\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {fio}\n"
        f"üÜî Chat ID: `{chat_id}`\n"
        f"üó∫Ô∏è –†–µ–≥–∏–æ–Ω(—ã): {groups_text}\n"
        f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}\n"
        f"üìÖ –î–∞—Ç–∞: {update.message.date.strftime('%d.%m.%Y %H:%M')}"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_reg:{registration_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_reg:{registration_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        bot = update.get_bot()
        sent_message = await bot.send_message(
            chat_id=approver_chat_id,
            text=request_message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–∞–∂–Ω–æ—Å—Ç–∏
        await bot.pin_chat_message(
            chat_id=approver_chat_id,
            message_id=sent_message.message_id
        )
        
        logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é {chat_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω–æ–º—É big_boss {approver_chat_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω–æ–º—É big_boss: {e}")


def get_pending_registration(registration_id: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–∂–∏–¥–∞—é—â–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ ID"""
    if hasattr(send_registration_request_to_big_boss, '_pending_registrations'):
        return send_registration_request_to_big_boss._pending_registrations.get(registration_id)
    return None


def remove_pending_registration(registration_id: str):
    """–£–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–∂–∏–¥–∞—é—â–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ ID"""
    if hasattr(send_registration_request_to_big_boss, '_pending_registrations'):
        send_registration_request_to_big_boss._pending_registrations.pop(registration_id, None)




def validate_position(position: str) -> bool:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    if not position or not isinstance(position, str):
        return False
    
    position = position.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if len(position) < 2 or len(position) > 50:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    position_lower = position.lower()
    
    # –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    suspicious_patterns = [
        r'^test', r'^—Ç–µ—Å—Ç', r'^spam', r'^—Å–ø–∞–º', r'^fake', r'^—Ñ–µ–π–∫',
        r'qwerty', r'asdf', r'123456', r'admin', r'user',
        r'aaa+', r'–∞–∞–∞+', r'xxx', r'—ã—ã—ã+',
        r'([a-z–∞-—è])\1{3,}',  # 4+ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞ –ø–æ–¥—Ä—è–¥
        r'^[a-z–∞-—è]{1,2}$',  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ (1-2 —Å–∏–º–≤–æ–ª–∞)
        r'^\d+$',  # –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        r'^[\-\.\(\)\s]+$'  # –¢–æ–ª—å–∫–æ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
    ]
    
    for pattern in suspicious_patterns:
        if re.search(pattern, position_lower):
            return False
    
    # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã, —Ç–æ—á–∫–∏, —Å–∫–æ–±–∫–∏
    if not re.match(r'^[–ê-–Ø–∞-—è–Å—ëA-Za-z0-9\s\-\.\(\)]+$', position):
        return False
    
    # –î–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É –±—É–∫–≤—É
    if not re.search(r'[–ê-–Ø–∞-—è–Å—ëA-Za-z]', position):
        return False
    
    # –ù–µ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
    if re.match(r'^[\s\-\.\(\)0-9]+$', position):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—É–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ (1-4 —Å–ª–æ–≤–∞)
    words = position.split()
    if len(words) == 0 or len(words) > 4:
        return False
    
    # –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º
    for word in words:
        if len(word) < 2 and word not in ['–∏', '–≤', '–ø–æ', '–Ω–∞', '–æ—Ç', '–∫']:
            return False
    
    return True


def validate_registration_context(context: dict, required_step: str) -> bool:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    """
    if not context or not isinstance(context, dict):
        return False
    
    current_step = context.get('registration_step')
    if current_step != required_step:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
    if required_step == 'region' and not context.get('fio'):
        return False
    elif required_step == 'position' and (not context.get('fio') or not context.get('selected_groups')):
        return False
    
    return True


def parse_registration_data(text: str) -> tuple[str, str] | None:
    """
    –ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    
    Args:
        text: –¢–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        
    Returns:
        –ö–æ—Ä—Ç–µ–∂ (–§–ò–û, –¥–æ–ª–∂–Ω–æ—Å—Ç—å) –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = re.sub(r'\s+', ' ', text.strip())
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –∑–∞–ø—è—Ç–æ–π
    if ',' in text:
        parts = text.split(',', 1)
        if len(parts) == 2:
            fio = parts[0].strip()
            position = parts[1].strip()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –§–ò–û (–º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞)
            if len(fio.split()) < 2:
                return None
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ (–Ω–µ –ø—É—Å—Ç–∞—è)
            if not position:
                return None
            
            return fio, position
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø—Ä–æ–±–µ–ª—É (–µ—Å–ª–∏ –º–Ω–æ–≥–æ —Å–ª–æ–≤)
    words = text.split()
    if len(words) >= 3:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ - –¥–æ–ª–∂–Ω–æ—Å—Ç—å
        fio = ' '.join(words[:-1])
        position = words[-1]
        return fio, position
    
    return None


async def handle_threshold_input(update: Update, text: str, chat_id: int) -> bool:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    Returns:
        True –µ—Å–ª–∏ –≤–≤–æ–¥ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–∫ –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    """
    from src.bot.handlers.callbacks import handle_set_threshold_device
    from src.core.storage import ThresholdManager
    from src.core.auth import can_access_group
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    user_id = update.effective_user.id
    context = threshold_context_manager.get_context(user_id)
    
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: context={context}")
    
    if not context:
        return False
    
    action = context.action
    group_name = context.group_name
    device_id = context.device_id
    stored_message_id = context.message_id
    stored_chat_id = context.chat_id
    
    if not action or not group_name or not stored_message_id:
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º bot instance –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    bot = update.get_bot()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
    if group_name not in ['USER', 'ALL'] and not can_access_group(chat_id, group_name):
        try:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π –¥–æ—Å—Ç—É–ø–∞
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º", callback_data="settings_thresholds")]]
            await bot.edit_message_text(
                chat_id=stored_chat_id,
                message_id=stored_message_id,
                text="‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ\n\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–æ—Å—Ç—É–ø–∞: {e}")
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        threshold_context_manager.clear_context(user_id)
        return True
    
    # –ü–∞—Ä—Å–∏–º –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–º–∏–Ω –º–∞–∫—Å"
    try:
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç markdown —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        clean_text = text.strip().replace('`', '').replace('*', '')
        parts = clean_text.split()
        
        logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç {chat_id}: –∏—Å—Ö–æ–¥–Ω—ã–π='{text}', –æ—á–∏—â–µ–Ω–Ω—ã–π='{clean_text}', —á–∞—Å—Ç–∏={parts}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–≤–æ–¥–æ–º
        try:
            await update.message.delete()
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–≤–æ–¥–æ–º –ø–æ—Ä–æ–≥–æ–≤ –æ—Ç {chat_id}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π
        async def edit_with_error(error_text: str):
            try:
                back_callback = "settings_thresholds" if group_name in ['USER', 'ALL'] else f"change_threshold_{group_name}"
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_callback)]]
                await bot.edit_message_text(
                    chat_id=stored_chat_id,
                    message_id=stored_message_id,
                    text=f"{error_text}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π: {e}")
        
        if len(parts) != 2:
            await edit_with_error(
                f"‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç**\n\n"
                f"–ü–æ–ª—É—á–µ–Ω–æ {len(parts)} –∑–Ω–∞—á–µ–Ω–∏–π –≤–º–µ—Å—Ç–æ 2\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `–º–∏–Ω –º–∞–∫—Å`\n"
                f"–ù–∞–ø—Ä–∏–º–µ—Ä: `18 25`"
            )
            return True
        
        try:
            min_temp = float(parts[0])
            max_temp = float(parts[1])
        except ValueError as ve:
            await edit_with_error(
                f"‚ùå **–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∏—Å–µ–ª**\n\n"
                f"–ü–æ–ª—É—á–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è: `{parts[0]}` –∏ `{parts[1]}`\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: `18 25`"
            )
            return True
        
        if min_temp >= max_temp:
            await edit_with_error("‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è**\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π")
            return True
        
        if min_temp < -50 or max_temp > 100:
            await edit_with_error("‚ùå **–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω**\n\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç -50¬∞C –¥–æ 100¬∞C")
            return True
        
        if abs(max_temp - min_temp) < 1.0:
            await edit_with_error("‚ùå **–°–ª–∏—à–∫–æ–º –º–∞–ª–∞—è —Ä–∞–∑–Ω–æ—Å—Ç—å**\n\n–†–∞–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –º–∏–Ω –∏ –º–∞–∫—Å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1¬∞C")
            return True
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        success = False
        
        if action == 'set_threshold_group' and device_id == 'ALL':
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥–∏ –¥–ª—è –≤—Å–µ–π –≥—Ä—É–ø–ø—ã
            from src.core.monitoring import get_sensors_by_group
            sensors = get_sensors_by_group(group_name)
            success_count = 0
            
            for sensor in sensors:
                sensor_device_id = sensor['device_id']
                try:
                    if ThresholdManager.set_device_threshold(sensor_device_id, group_name, min_temp, max_temp):
                        success_count += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–∞ –¥–ª—è {sensor_device_id}: {e}")
            
            success = success_count > 0
            
            if success:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                try:
                    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º", callback_data=f"change_threshold_{group_name}")]]
                    await bot.edit_message_text(
                        chat_id=stored_chat_id,
                        message_id=stored_message_id,
                        text=f"‚úÖ **–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}**\n\n"
                             f"üå°Ô∏è –ú–∏–Ω–∏–º—É–º: {min_temp}¬∞C\n"
                             f"üå°Ô∏è –ú–∞–∫—Å–∏–º—É–º: {max_temp}¬∞C\n"
                             f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {success_count}/{len(sensors)}",
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—Å–ø–µ—Ö–æ–º: {e}")
            else:
                try:
                    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º", callback_data=f"change_threshold_{group_name}")]]
                    await bot.edit_message_text(
                        chat_id=stored_chat_id,
                        message_id=stored_message_id,
                        text="‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏**\n\n–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π: {e}")
            
        elif action == 'set_threshold_device':
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            try:
                success = ThresholdManager.set_device_threshold(device_id, group_name, min_temp, max_temp)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–∞ –¥–ª—è {device_id}: {e}")
                success = False
            
            if success:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                try:
                    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º", callback_data=f"change_threshold_{group_name}")]]
                    safe_device_id = device_id.replace('_', '\\_')
                    await bot.edit_message_text(
                        chat_id=stored_chat_id,
                        message_id=stored_message_id,
                        text=f"‚úÖ **–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {safe_device_id}**\n\n"
                             f"üè¢ –ì—Ä—É–ø–ø–∞: {group_name}\n"
                             f"üå°Ô∏è –ú–∏–Ω–∏–º—É–º: {min_temp}¬∞C\n"
                             f"üå°Ô∏è –ú–∞–∫—Å–∏–º—É–º: {max_temp}¬∞C",
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—Å–ø–µ—Ö–æ–º: {e}")
            else:
                try:
                    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º", callback_data=f"change_threshold_{group_name}")]]
                    await bot.edit_message_text(
                        chat_id=stored_chat_id,
                        message_id=stored_message_id,
                        text="‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏**\n\n–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π: {e}")
        
        elif action == 'set_threshold_all_sensors':
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥–∏ –¥–ª—è –í–°–ï–• –¥–∞—Ç—á–∏–∫–æ–≤ –≤—Å–µ—Ö –≥—Ä—É–ø–ø (—Ç–æ–ª—å–∫–æ –¥–ª—è big_boss)
            from src.core.monitoring import get_all_groups, get_sensors_by_group
            all_groups = get_all_groups()
            total_updated = 0
            total_sensors = 0
            
            for group in all_groups:
                sensors = get_sensors_by_group(group)
                total_sensors += len(sensors)
                
                for sensor in sensors:
                    sensor_device_id = sensor['device_id']
                    try:
                        if ThresholdManager.set_device_threshold(sensor_device_id, group, min_temp, max_temp):
                            total_updated += 1
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–∞ –¥–ª—è {sensor_device_id} –≤ –≥—Ä—É–ø–ø–µ {group}: {e}")
            
            if total_updated > 0:
                try:
                    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º", callback_data="settings_thresholds")]]
                    await bot.edit_message_text(
                        chat_id=stored_chat_id,
                        message_id=stored_message_id,
                        text=f"üåç **–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –í–°–ï–• –¥–∞—Ç—á–∏–∫–æ–≤!**\n\n"
                             f"üå°Ô∏è –ú–∏–Ω–∏–º—É–º: {min_temp}¬∞C\n"
                             f"üå°Ô∏è –ú–∞–∫—Å–∏–º—É–º: {max_temp}¬∞C\n"
                             f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–∞—Ç—á–∏–∫–æ–≤: {total_updated}/{total_sensors}\n"
                             f"üìç –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ –≥—Ä—É–ø–ø: {len(all_groups)}",
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—Å–ø–µ—Ö–æ–º: {e}")
            else:
                try:
                    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º", callback_data="settings_thresholds")]]
                    await bot.edit_message_text(
                        chat_id=stored_chat_id,
                        message_id=stored_message_id,
                        text="‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏**\n\n–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π: {e}")
        
        elif action == 'set_threshold_user_sensors':
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥–∏ –¥–ª—è –≤—Å–µ—Ö –¥–∞—Ç—á–∏–∫–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≥—Ä—É–ø–ø
            from src.core.monitoring import get_sensors_by_group
            user_groups = context.get('user_groups', [])
            total_updated = 0
            total_sensors = 0
            
            for group in user_groups:
                sensors = get_sensors_by_group(group)
                total_sensors += len(sensors)
                
                for sensor in sensors:
                    sensor_device_id = sensor['device_id']
                    try:
                        if ThresholdManager.set_device_threshold(sensor_device_id, group, min_temp, max_temp):
                            total_updated += 1
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–∞ –¥–ª—è {sensor_device_id} –≤ –≥—Ä—É–ø–ø–µ {group}: {e}")
            
            if total_updated > 0:
                try:
                    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º", callback_data="settings_thresholds")]]
                    await bot.edit_message_text(
                        chat_id=stored_chat_id,
                        message_id=stored_message_id,
                        text=f"üîß **–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –≤–∞—à–∏—Ö –¥–∞—Ç—á–∏–∫–æ–≤!**\n\n"
                             f"üå°Ô∏è –ú–∏–Ω–∏–º—É–º: {min_temp}¬∞C\n"
                             f"üå°Ô∏è –ú–∞–∫—Å–∏–º—É–º: {max_temp}¬∞C\n"
                             f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–∞—Ç—á–∏–∫–æ–≤: {total_updated}/{total_sensors}\n"
                             f"üìç –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ –≥—Ä—É–ø–ø: {', '.join(user_groups)} ({len(user_groups)})",
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—Å–ø–µ—Ö–æ–º: {e}")
            else:
                try:
                    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º", callback_data="settings_thresholds")]]
                    await bot.edit_message_text(
                        chat_id=stored_chat_id,
                        message_id=stored_message_id,
                        text="‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏**\n\n–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π: {e}")
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        threshold_context_manager.clear_context(user_id)
        
        logger.info(f"–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {chat_id}: {group_name}/{device_id} = {min_temp}-{max_temp}")
        return True
        
    except ValueError:
        try:
            back_callback = "settings_thresholds" if group_name in ['USER', 'ALL'] else f"change_threshold_{group_name}"
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_callback)]]
            await bot.edit_message_text(
                chat_id=stored_chat_id,
                message_id=stored_message_id,
                text="‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `–º–∏–Ω –º–∞–∫—Å`\n–ù–∞–ø—Ä–∏–º–µ—Ä: `18.5 25.0`",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π ValueError: {e}")
        threshold_context_manager.clear_context(user_id)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç {chat_id}: {e}")
        try:
            back_callback = "settings_thresholds" if group_name in ['USER', 'ALL'] else f"change_threshold_{group_name}"
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_callback)]]
            await bot.edit_message_text(
                chat_id=stored_chat_id,
                message_id=stored_message_id,
                text="‚ùå **–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞**\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        except Exception as e2:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–∏—Å—Ç–µ–º–Ω–æ–π –æ—à–∏–±–∫–æ–π: {e2}")
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
        threshold_context_manager.clear_context(user_id)
        return True


async def handle_unknown_command_in_existing_menu(update: Update, chat_id: int, text: str) -> bool:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ—à–∏–±–∫—É –≤ –Ω—ë–º
    
    Returns:
        True –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
    """
    from src.bot.handlers.callbacks import handle_set_threshold_device
    from src.bot.utils import get_last_user_menu
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
    try:
        await update.message.delete()
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π: '{text[:50]}'")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    bot = update.get_bot()
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    user_id = update.effective_user.id
    threshold_context = threshold_context_manager.get_context(user_id)
    
    if threshold_context and threshold_context.message_id and threshold_context.chat_id:
        # –ù–∞—à–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        try:
            stored_message_id = threshold_context.message_id
            stored_chat_id = threshold_context.chat_id
            group_name = threshold_context.group_name
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
            if group_name in ['USER', 'ALL']:
                back_callback = "settings_thresholds"
                back_text = "üîô –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º"
            else:
                back_callback = f"change_threshold_{group_name}"
                back_text = "üîô –ù–∞–∑–∞–¥ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º"
            
            keyboard = [[InlineKeyboardButton(back_text, callback_data=back_callback)]]
            
            await bot.edit_message_text(
                chat_id=stored_chat_id,
                message_id=stored_message_id,
                text=f"‚ùå **–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥**\n\n"
                     f"–ü–æ–ª—É—á–µ–Ω: `{text[:50]}`\n\n"
                     f"–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–æ–≤ —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—á–∏–∫ –∏–ª–∏ –≥—Ä—É–ø–ø—É, "
                     f"–∞ –∑–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `–º–∏–Ω –º–∞–∫—Å`",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
            logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –º–µ–Ω—é –ø–æ—Ä–æ–≥–æ–≤ –¥–ª—è {chat_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ—Ä–æ–≥–æ–≤: {e}")
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    last_menu = get_last_user_menu(chat_id)
    
    if last_menu and last_menu.get('message_id') and last_menu.get('chat_id'):
        try:
            stored_message_id = last_menu.get('message_id')
            stored_chat_id = last_menu.get('chat_id')
            
            # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            from src.bot.keyboards import get_main_keyboard
            from src.core.auth import get_user_role
            
            role = get_user_role(chat_id)
            keyboard = get_main_keyboard(role)
            
            await bot.edit_message_text(
                chat_id=stored_chat_id,
                message_id=stored_message_id,
                text=f"‚ùå **–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞**\n\n"
                     f"–ü–æ–ª—É—á–µ–Ω: `{text[:30]}`\n\n"
                     f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å–∏—Å—Ç–µ–º–µ.",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
            logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –º–µ–Ω—é –¥–ª—è {chat_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ–Ω—é: {e}")
    
    # –ù–µ –Ω–∞—à–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–Ω—é
    return False


async def handle_url_input(update: Update, chat_id: int, text: str):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    is_safe, error_msg = validate_request_security(chat_id, f"url:{text[:100]}")
    if not is_safe:
        await update.message.reply_text(format_error_message('rate_limited', error_msg))
        return
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –æ—Ç {chat_id}: {text[:100]}")
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π
    try:
        await update.message.delete()
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –æ—Ç {chat_id}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π: {e}")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ—à–∏–±–∫—É –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –º–µ–Ω—é
    url_handled = await handle_media_in_existing_menu(update, chat_id, "üîó —Å—Å—ã–ª–∫–∞")
    if not url_handled:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é, —Å–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ—à–∏–±–∫–æ–π
        logger.warning(f"–°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞, –Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}. –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        
        from src.core.auth import get_user_role
        from src.bot.keyboards import get_main_keyboard
        
        role = get_user_role(chat_id)
        keyboard = get_main_keyboard(role)
        
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
        sent_message = await update.get_bot().send_message(
            chat_id=chat_id,
            text=f"‚ùå **–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è**\n\n"
                 f"–ü–æ–ª—É—á–µ–Ω–∞: üîó —Å—Å—ã–ª–∫–∞\n\n"
                 f"–ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ —Å—Å—ã–ª–∫–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        
        # –í–ê–ñ–ù–û: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        if sent_message:
            from src.bot.utils import track_user_menu
            track_user_menu(
                user_id=chat_id, 
                chat_id=chat_id, 
                message_id=sent_message.message_id, 
                menu_type="main",
                menu_context={}
            )


async def handle_media_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞ (–∫–∞—Ä—Ç–∏–Ω–∫–∏, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã)
    –£–¥–∞–ª—è–µ—Ç –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∞–∫—Ç–∏–≤–Ω–æ–º –º–µ–Ω—é
    """
    chat_id = update.effective_chat.id
    message = update.message
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞
    media_type = "unknown"
    if message.photo:
        media_type = "üñºÔ∏è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    elif message.video:
        media_type = "üé• –≤–∏–¥–µ–æ"
    elif message.audio:
        media_type = "üéµ –∞—É–¥–∏–æ"
    elif message.voice:
        media_type = "üé§ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    elif message.video_note:
        media_type = "üìπ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ"
    elif message.document:
        media_type = "üìÑ –¥–æ–∫—É–º–µ–Ω—Ç"
    elif message.sticker:
        media_type = "üìé —Å—Ç–∏–∫–µ—Ä"
    elif message.animation:
        media_type = "üìπ GIF-–∞–Ω–∏–º–∞—Ü–∏—è"
    elif message.contact:
        media_type = "üìû –∫–æ–Ω—Ç–∞–∫—Ç"
    elif message.location:
        media_type = "üó∫Ô∏è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è"
    elif message.venue:
        media_type = "üè¢ –º–µ—Å—Ç–æ"
    elif message.poll:
        media_type = "üìä –æ–ø—Ä–æ—Å"
    elif message.dice:
        media_type = "üé≤ –∫—É–±–∏–∫"
    elif message.game:
        media_type = "üéÆ –∏–≥—Ä–∞"
    elif message.invoice:
        media_type = "üí≥ —Å—á–µ—Ç/–∏–Ω–≤–æ–π—Å"
    elif message.successful_payment:
        media_type = "üí∞ –ø–ª–∞—Ç–µ–∂"
    elif message.passport_data:
        media_type = "üõÇ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
    elif getattr(message, 'story', None):
        media_type = "üìñ –∏—Å—Ç–æ—Ä–∏—è"
    elif message.has_media_spoiler:
        media_type = "üôà –º–µ–¥–∏–∞ —Å–æ —Å–ø–æ–π–ª–µ—Ä–æ–º"
    elif message.has_protected_content:
        media_type = "üîí –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"
    elif message.is_automatic_forward:
        media_type = "‚Ü™Ô∏è –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∞"
    elif message.is_topic_message:
        media_type = "üí¨ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ø–∏–∫–∞"
    elif getattr(message, 'user_attachment', None):
        media_type = "üìé –≤–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    is_safe, error_msg = validate_request_security(chat_id, f"media:{media_type}")
    if not is_safe:
        await message.reply_text(format_error_message('rate_limited', error_msg))
        return
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {media_type} –æ—Ç {chat_id}")
    
    # –£–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await message.delete()
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ {media_type} –æ—Ç {chat_id}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {media_type}: {e}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —É–º–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    from src.bot.utils import smart_update_current_menu
    
    media_handled = await smart_update_current_menu(
        update, 
        chat_id, 
        "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è", 
        media_type
    )
    
    if not media_handled:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é, —Å–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ—à–∏–±–∫–æ–π
        logger.warning(f"–ú–µ–¥–∏–∞ {media_type} —É–¥–∞–ª–µ–Ω–æ, –Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}. –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        
        from src.core.auth import get_user_role
        from src.bot.keyboards import get_main_keyboard
        
        role = get_user_role(chat_id)
        keyboard = get_main_keyboard(role)
        
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
        sent_message = await update.get_bot().send_message(
            chat_id=chat_id,
            text=f"‚ùå **–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è**\n\n"
                 f"–ü–æ–ª—É—á–µ–Ω: {media_type}\n\n"
                 f"–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é.",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        
        # –í–ê–ñ–ù–û: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        if sent_message:
            from src.bot.utils import track_user_menu
            track_user_menu(
                user_id=chat_id, 
                chat_id=chat_id, 
                message_id=sent_message.message_id, 
                menu_type="main",
                menu_context={}
            )


async def handle_media_in_existing_menu(update: Update, chat_id: int, media_type: str) -> bool:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ—à–∏–±–∫—É –æ –º–µ–¥–∏–∞
    
    Returns:
        True –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
    """
    from src.bot.handlers.callbacks import handle_set_threshold_device
    from src.bot.utils import get_last_user_menu
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    bot = update.get_bot()
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    user_id = update.effective_user.id
    threshold_context = threshold_context_manager.get_context(user_id)
    
    if threshold_context and threshold_context.message_id and threshold_context.chat_id:
        try:
            stored_message_id = threshold_context.message_id
            stored_chat_id = threshold_context.chat_id
            group_name = threshold_context.group_name
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
            if group_name in ['USER', 'ALL']:
                back_callback = "settings_thresholds"
                back_text = "üîô –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º"
            else:
                back_callback = f"change_threshold_{group_name}"
                back_text = "üîô –ù–∞–∑–∞–¥ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º"
            
            keyboard = [[InlineKeyboardButton(back_text, callback_data=back_callback)]]
            
            await bot.edit_message_text(
                chat_id=stored_chat_id,
                message_id=stored_message_id,
                text=f"‚ùå **–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç**\n\n"
                     f"–ü–æ–ª—É—á–µ–Ω: {media_type}\n\n"
                     f"–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `–º–∏–Ω –º–∞–∫—Å`",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
            logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ {media_type} –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –º–µ–Ω—é –ø–æ—Ä–æ–≥–æ–≤ –¥–ª—è {chat_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ—Ä–æ–≥–æ–≤ –¥–ª—è {media_type}: {e}")
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    last_menu = get_last_user_menu(chat_id)
    
    if last_menu and last_menu.get('message_id') and last_menu.get('chat_id'):
        try:
            stored_message_id = last_menu.get('message_id')
            stored_chat_id = last_menu.get('chat_id')
            
            # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            from src.bot.keyboards import get_main_keyboard
            from src.core.auth import get_user_role
            
            role = get_user_role(chat_id)
            keyboard = get_main_keyboard(role)
            
            await bot.edit_message_text(
                chat_id=stored_chat_id,
                message_id=stored_message_id,
                text=f"‚ùå **–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è**\n\n"
                     f"–ü–æ–ª—É—á–µ–Ω: {media_type}\n\n"
                     f"–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é.",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
            logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ {media_type} –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –º–µ–Ω—é –¥–ª—è {chat_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ–Ω—é –¥–ª—è {media_type}: {e}")
    
    # –ù–µ –Ω–∞—à–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–Ω—é
    return False




async def handle_invalid_content(update: Update, chat_id: int, _text: str, content_type: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º —É–º–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –º–µ–Ω—é
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        chat_id: ID —á–∞—Ç–∞
        _text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –Ω—É–∂–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        content_type: –¢–∏–ø –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    """
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await update.message.delete()
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º ({content_type}) –æ—Ç {chat_id}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º: {e}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —É–º–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    from src.bot.utils import smart_update_current_menu
    
    content_handled = await smart_update_current_menu(
        update, 
        chat_id, 
        "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è", 
        content_type
    )
    
    if not content_handled:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é, —Å–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ—à–∏–±–∫–æ–π
        logger.warning(f"–¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —É–¥–∞–ª–µ–Ω, –Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}. –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        
        from src.core.auth import get_user_role
        from src.bot.keyboards import get_main_keyboard
        
        role = get_user_role(chat_id)
        keyboard = get_main_keyboard(role)
        
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
        sent_message = await update.get_bot().send_message(
            chat_id=chat_id,
            text=f"‚ùå **–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è**\n\n"
                 f"–û–±–Ω–∞—Ä—É–∂–µ–Ω: {content_type}\n\n"
                 f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        
        # –í–ê–ñ–ù–û: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        if sent_message:
            from src.bot.utils import track_user_menu
            track_user_menu(
                user_id=chat_id, 
                chat_id=chat_id, 
                message_id=sent_message.message_id, 
                menu_type="main",
                menu_context={}
            )


async def handle_registration_reset_with_smart_deletion(update: Update, chat_id: int, text: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Å–±—Ä–æ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —É–º–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º
    """
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await update.message.delete()
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–±—Ä–æ—Å–∞ –æ—Ç {chat_id}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–±—Ä–æ—Å–∞: {e}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–±—Ä–æ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await handle_registration_reset(update, chat_id)


async def handle_user_registration_with_smart_deletion(update: Update, text: str, chat_id: int) -> bool:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–º–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º
    
    Returns:
        True –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–∫ —á–∞—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        False –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å)
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if not hasattr(handle_user_registration, 'temp_storage'):
        handle_user_registration.temp_storage = {}
    
    context = handle_user_registration.temp_storage.get(chat_id, {})
    registration_step = context.get('registration_step', 'fio')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —à–∞–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    valid_steps = ['fio', 'position']
    if registration_step not in valid_steps:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - —É–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç
        return False
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    try:
        await update.message.delete()
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (—à–∞–≥: {registration_step}) –æ—Ç {chat_id}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–≥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–µ–Ω—é
    if registration_step == 'fio':
        # –®–∞–≥ 1: –í–≤–æ–¥ –§–ò–û
        if not validate_fio(text):
            # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –º–µ–Ω—é
            registration_handled = await handle_media_in_existing_menu(update, chat_id, "‚ùå –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û")
            if not registration_handled:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é, —Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –§–ò–û, –Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}. –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                
                sent_message = await update.get_bot().send_message(
                    chat_id=chat_id,
                    text="‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û**\n\n"
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                         "`–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á`\n\n"
                         "–î–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ: `—Å–±—Ä–æ—Å`",
                    parse_mode='Markdown'
                )
                
                # –ù–ï —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —ç—Ç–æ –∫–∞–∫ –º–µ–Ω—é, –ø–æ—Å–∫–æ–ª—å–∫—É —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return True
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ä–µ–≥–∏–æ–Ω–∞
        context['fio'] = text.strip()
        context['registration_step'] = 'region'
        context['selected_groups'] = []
        handle_user_registration.temp_storage[chat_id] = context
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –º–µ–Ω—é
        await show_region_selection_with_smart_menu(update, chat_id)
        return True
        
    elif registration_step == 'position':
        # –®–∞–≥ 3: –í–≤–æ–¥ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        if not validate_position(text):
            # –ù–µ–≤–µ—Ä–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –º–µ–Ω—é
            registration_handled = await handle_media_in_existing_menu(update, chat_id, "‚ùå –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–∏")
            if not registration_handled:
                logger.warning(f"–ù–µ–≤–µ—Ä–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}. –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                
                sent_message = await update.get_bot().send_message(
                    chat_id=chat_id,
                    text="‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–∏**\n\n"
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å (–æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤)\n\n"
                         "–î–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ: `—Å–±—Ä–æ—Å`",
                    parse_mode='Markdown'
                )
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if not validate_registration_context(context, 'position'):
            registration_handled = await handle_media_in_existing_menu(update, chat_id, "‚ùå –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
            if not registration_handled:
                logger.warning(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}. –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏.")
                
                sent_message = await update.get_bot().send_message(
                    chat_id=chat_id,
                    text="‚ùå **–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏**\n\n"
                         "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"
                         "–ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã `/start`",
                    parse_mode='Markdown'
                )
            # –û—á–∏—â–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            handle_user_registration.temp_storage.pop(chat_id, None)
            return True
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        context['position'] = text.strip()
        handle_user_registration.temp_storage[chat_id] = context
        await complete_registration_with_smart_menu(update, chat_id, context)
        return True
    
    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ - —Ç–µ–∫—Å—Ç –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    return False


async def show_region_selection_with_smart_menu(update: Update, chat_id: int):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –º–µ–Ω—é
    """
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
    from src.bot.utils import get_last_user_menu
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    bot = update.get_bot()
    last_menu = get_last_user_menu(chat_id)
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏
    groups = get_all_groups()
    keyboard = []
    for i, group in enumerate(groups):
        keyboard.append([InlineKeyboardButton(f"üìç {group}", callback_data=f"reg_select_group_{group}")])
        if i >= 10:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø
            break
    
    text = (
        "**üè¢ –í—ã–±–æ—Ä —Ä–∞–±–æ—á–∏—Ö –≥—Ä—É–ø–ø**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã —Å–∫–ª–∞–¥–æ–≤, –∫ –∫–æ—Ç–æ—Ä—ã–º —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø:\n\n"
        "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:**"
    )
    
    if last_menu and last_menu.get('message_id') and last_menu.get('chat_id'):
        try:
            await bot.edit_message_text(
                chat_id=last_menu.get('chat_id'),
                message_id=last_menu.get('message_id'),
                text=text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞: {e}")
    
    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ
    await reply_with_keyboard(
        update,
        text,
        custom_keyboard=InlineKeyboardMarkup(keyboard),
        is_registration=True
    )


async def complete_registration_with_smart_menu(update: Update, chat_id: int, context: dict):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –º–µ–Ω—é
    """
    await complete_registration(update, chat_id, context)


async def handle_unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (–Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å /)
    """
    chat_id = update.effective_chat.id
    command = update.message.text.strip()
    
    logger.info(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç {chat_id}: {command}")
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
    try:
        await update.message.delete()
        logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ({command}) –æ—Ç {chat_id}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É: {e}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —É–º–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    from src.bot.utils import smart_update_current_menu
    
    command_handled = await smart_update_current_menu(
        update, 
        chat_id, 
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", 
        f"/{command.lstrip('/')}"
    )
    
    if not command_handled:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é, —Å–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ—à–∏–±–∫–æ–π
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ {command}, –Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}. –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        
        from src.core.auth import get_user_role
        from src.bot.keyboards import get_main_keyboard
        
        role = get_user_role(chat_id)
        keyboard = get_main_keyboard(role)
        
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
        sent_message = await update.get_bot().send_message(
            chat_id=chat_id,
            text=f"‚ùå **–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞**\n\n"
                 f"–ö–æ–º–∞–Ω–¥–∞: `{command}`\n\n"
                 f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /help\n"
                 f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        
        # –í–ê–ñ–ù–û: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        if sent_message:
            from src.bot.utils import track_user_menu
            track_user_menu(
                user_id=chat_id, 
                chat_id=chat_id, 
                message_id=sent_message.message_id, 
                menu_type="main",
                menu_context={}
            )