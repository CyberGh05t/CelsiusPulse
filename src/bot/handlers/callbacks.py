"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback query (–Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫)
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from ...config.logging import SecureLogger
from ...core.auth import get_user_role, is_authorized, can_access_group
from ...core.monitoring import get_all_groups, get_sensors_by_group, get_sensor_by_id, get_monitoring_statistics, get_user_statistics
from ...core.storage import AdminManager, ThresholdManager
from ...bot.messages import (
    format_group_sensors_message, format_sensor_message, 
    format_admin_list_message, format_thresholds_message,
    format_statistics_message, format_error_message
)
from ...bot.keyboards import (
    get_main_keyboard, get_groups_keyboard, get_sensor_details_keyboard,
    get_help_keyboard
)
from ...utils.security import validate_request_security, get_security_stats

logger = SecureLogger(__name__)

# –ö–µ—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π
user_last_action = {}

async def safe_edit_message(query, text, reply_markup=None, parse_mode='Markdown'):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    """
    try:
        await query.edit_message_text(
            text, 
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
        return True
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await query.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        except:
            pass
        return False


async def button_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback query (–Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫)
    """
    query = update.callback_query
    chat_id = update.effective_chat.id
    callback_data = query.data
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    is_safe, error_msg = validate_request_security(chat_id, callback_data)
    if not is_safe:
        await query.answer(error_msg)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º (–ø—Ä–æ—Å—Ç–æ–π cooldown)
    from datetime import datetime, timedelta
    now = datetime.now()
    user_key = f"{chat_id}:{callback_data}"
    
    if user_key in user_last_action:
        time_diff = now - user_last_action[user_key]
        if time_diff < timedelta(seconds=1):  # 1 —Å–µ–∫—É–Ω–¥–∞ cooldown
            await query.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º")
            return
    
    user_last_action[user_key] = now
    logger.info(f"Callback –æ—Ç {chat_id}: {callback_data}")
    
    try:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ callback
        try:
            await query.answer()
        except Exception as e:
            logger.debug(f"Callback —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª: {e}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        role = get_user_role(chat_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö callback –¥–µ–π—Å—Ç–≤–∏–π
        if callback_data == "back_to_main":
            await handle_main_menu(query, role)
        
        elif callback_data == "my_data":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            if is_user_in_registration(chat_id):
                await query.answer("‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", show_alert=True)
                return
            await handle_my_data(query, chat_id, role)
        
        elif callback_data == "select_group":
            if block_if_in_registration(chat_id):
                await query.answer("‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", show_alert=True)
                return
            await handle_select_group(query, chat_id, role)
        
        elif callback_data.startswith("group:"):
            group_name = callback_data.split(":", 1)[1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            from ..handlers.admin import handle_user_registration
            context = getattr(handle_user_registration, 'temp_storage', {}).get(chat_id, {})
            if context.get('registration_step') == 'region':
                await handle_region_selection(query, chat_id, group_name)
            else:
                await handle_group_data(query, chat_id, role, group_name)
        
        elif callback_data.startswith("toggle_group:"):
            group_name = callback_data.split(":", 1)[1]
            await handle_toggle_group(query, chat_id, group_name)
        
        elif callback_data == "finish_group_selection":
            await handle_finish_group_selection(query, chat_id)
        
        elif callback_data == "need_select_group":
            await query.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è", show_alert=True)
        
        elif callback_data == "no_groups_temp":
            await query.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø. –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å API –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–∞–º –∏–∑ –∫–µ—à–∞.", show_alert=True)
        
        
        elif callback_data.startswith("sensor:"):
            sensor_id = callback_data.split(":", 1)[1]
            await handle_sensor_data(query, sensor_id)
        
        elif callback_data == "admin_all_data":
            if block_if_in_registration(chat_id):
                await query.answer("‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", show_alert=True)
                return
            await handle_admin_all_data(query, role)
        
        elif callback_data == "admin_thresholds":
            if block_if_in_registration(chat_id):
                await query.answer("‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", show_alert=True)
                return
            await handle_admin_thresholds(query, role)
            
        elif callback_data == "settings_thresholds":
            if block_if_in_registration(chat_id):
                await query.answer("‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", show_alert=True)
                return
            await handle_settings_thresholds(query, role)
        
        elif callback_data == "list_admins":
            if block_if_in_registration(chat_id):
                await query.answer("‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", show_alert=True)
                return
            await handle_list_admins(query, role)
        
        elif callback_data == "system_stats":
            if block_if_in_registration(chat_id):
                await query.answer("‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", show_alert=True)
                return
            await handle_system_stats(query, role)
        
        elif callback_data == "security_stats":
            if block_if_in_registration(chat_id):
                await query.answer("‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", show_alert=True)
                return
            await handle_security_stats(query, role)
        
        elif callback_data == "help":
            if block_if_in_registration(chat_id):
                await query.answer("‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", show_alert=True)
                return
            await handle_help(query)
        
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        elif callback_data.startswith("change_threshold_"):
            group_name = callback_data[17:]  # –£–±–∏—Ä–∞–µ–º "change_threshold_"
            if not can_access_group(chat_id, group_name):
                await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ", show_alert=True)
                return
            await handle_change_threshold_group(query, group_name, role)
        
        elif callback_data.startswith("set_threshold_"):
            # Format: set_threshold_GROUP_DEVICE
            parts = callback_data[14:].split('_', 1)  # –£–±–∏—Ä–∞–µ–º "set_threshold_"
            if len(parts) >= 2:
                group_name = parts[0]
                device_id = parts[1]
                if not can_access_group(chat_id, group_name):
                    await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ", show_alert=True)
                    return
                await handle_set_threshold_device(query, group_name, device_id, role)
        
        elif callback_data == "dummy":
            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
            await query.answer("üîπ –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å", show_alert=False)
        
        elif callback_data == "no_groups":
            await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø", show_alert=True)
        
        elif callback_data == "show_all_data":
            await handle_admin_all_data(query, role)
        
        elif callback_data.startswith("confirm_reg:"):
            await handle_confirm_registration_new(query, callback_data)
            
        elif callback_data.startswith("reject_reg:"):
            await handle_reject_registration_new(query, callback_data)
        
        elif callback_data in ["help_manual", "help_support", "help_contacts", "help_faq", 
                               "help_terms", "help_license", "help_codereview", "help_status",
                               "help_changelog", "help_videos"]:
            await handle_help_sections(query, callback_data)
        
        else:
            await query.edit_message_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback handler –¥–ª—è {chat_id}: {e}")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            if query.message:
                await query.edit_message_text(
                    format_error_message('system_error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞')
                )
            else:
                # –ï—Å–ª–∏ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
        except Exception as edit_error:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_error}")
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø–æ–∫–∞–∑–∞—Ç—å alert
            try:
                await query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
            except:
                pass  # –ò–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ—à–∏–±–æ–∫


async def handle_main_menu(query, role: str):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = get_main_keyboard(role)
    text = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    await safe_edit_message(query, text, reply_markup=keyboard)


async def handle_my_data(query, chat_id: int, role: str):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = get_main_keyboard(role)
    
    if role == 'big_boss':
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ big_boss
        admin_info = AdminManager.load_admin_info(chat_id)
        fio = admin_info.get('fio', 'Big Boss') if admin_info else 'Big Boss'
        # –î–ª—è big_boss –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        all_groups = get_all_groups()
        total_sensors = sum(len(get_sensors_by_group(group)) for group in all_groups)
        
        message = f"üë§ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ\n\n"
        message += f"üë®‚Äçüíº –§–ò–û: {fio}\n"
        message += f"üÜî Chat ID: `{chat_id}`\n"
        message += f"üíº –†–æ–ª—å: Big Boss (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)\n"
        message += f"üåê –î–æ—Å—Ç—É–ø: –∫–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º —Å–∏—Å—Ç–µ–º—ã\n\n"
        message += f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        message += f"üìç –í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {len(all_groups)}\n"
        message += f"üå°Ô∏è –í—Å–µ–≥–æ –¥–∞—Ç—á–∏–∫–æ–≤: {total_sensors}\n"
        
        if all_groups:
            message += "\nüè¢ –ì—Ä—É–ø–ø—ã –≤ —Å–∏—Å—Ç–µ–º–µ:\n"
            for group in all_groups:
                sensors_count = len(get_sensors_by_group(group))
                message += f"‚Ä¢ {group}: {sensors_count} –¥–∞—Ç—á–∏–∫–æ–≤\n"
                
    elif role == 'admin':
        # –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –±–µ—Ä–µ–º –≥—Ä—É–ø–ø—ã –¢–û–õ–¨–ö–û –∏–∑ .env (ADMIN_GROUPS)
        from ...core.auth import ADMIN_GROUPS
        groups = ADMIN_GROUPS.get(chat_id, [])
        
        # –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ admins.json
        admin_info = AdminManager.load_admin_info(chat_id)
        fio = admin_info.get('fio', '–ù–µ —É–∫–∞–∑–∞–Ω–æ') if admin_info else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        position = admin_info.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–∞') if admin_info else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
        
        message = f"üë§ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ\n\n"
        message += f"üë®‚Äçüíº –§–ò–û: {fio}\n"
        message += f"üÜî Chat ID: `{chat_id}`\n"
        message += f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}\n"
        message += f"üîê –†–æ–ª—å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
        message += f"üìã –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã: {', '.join(groups) if groups else '–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø'}"
    
    else:
        # –î–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        message = f"üë§ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ\n\n"
        message += f"üÜî Chat ID: `{chat_id}`\n"
        message += f"üíº –†–æ–ª—å: –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n\n"
        message += "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
        message += "–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
    
    await safe_edit_message(query, message, reply_markup=keyboard)


async def handle_select_group(query, chat_id: int, role: str):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ä–æ–ª—è–º"""
    from ...core.auth import get_user_accessible_groups
    
    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –≥—Ä—É–ø–ø—ã –∏–∑ –∫–µ—à–∞ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
    all_cached_groups = get_all_groups()
    
    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ä–æ–ª–∏)
    user_accessible_groups = get_user_accessible_groups(chat_id)
    
    # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –∫–µ—à–µ –ò –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if role == 'big_boss':
        # Big boss –≤–∏–¥–∏—Ç –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏–∑ –∫–µ—à–∞
        available_groups = all_cached_groups
        logger.debug(f"BigBoss {chat_id}: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ {len(available_groups)} –≥—Ä—É–ø–ø –∏–∑ –∫–µ—à–∞")
    else:
        # –ê–¥–º–∏–Ω—ã –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–≤–æ–∏—Ö –≥—Ä—É–ø–ø —Å –≥—Ä—É–ø–ø–∞–º–∏ –∏–∑ –∫–µ—à–∞
        available_groups = [g for g in all_cached_groups if g in user_accessible_groups]
        logger.debug(f"–ê–¥–º–∏–Ω {chat_id}: –¥–æ—Å—Ç—É–ø–Ω–æ {len(user_accessible_groups)} –≥—Ä—É–ø–ø, "
                    f"–≤ –∫–µ—à–µ {len(all_cached_groups)} –≥—Ä—É–ø–ø, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º {len(available_groups)} –≥—Ä—É–ø–ø")
        
        if not available_groups and all_cached_groups and user_accessible_groups:
            logger.warning(f"–ê–¥–º–∏–Ω {chat_id} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∏ –∫ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ –∏–∑ –∫–µ—à–∞. "
                          f"–ö–µ—à: {all_cached_groups}, –¥–æ—Å—Ç—É–ø–Ω—ã–µ: {user_accessible_groups}")
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å API
    if not all_cached_groups:
        logger.warning(f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} (—Ä–æ–ª—å: {role}). "
                      f"–ö–µ—à –ø—É—Å—Ç –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞).")
    
    keyboard = get_groups_keyboard(available_groups, show_all=(role in ['admin', 'big_boss']))
    text = "üìä –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    
    await safe_edit_message(query, text, reply_markup=keyboard)


async def handle_group_data(query, chat_id: int, role: str, group_name: str):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ
    if not can_access_group(chat_id, group_name):
        await query.edit_message_text(
            format_error_message('access_denied', f'–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ {group_name}')
        )
        return
    
    sensors = get_sensors_by_group(group_name)
    message = format_group_sensors_message(group_name, sensors)
    
    from ...core.auth import get_user_accessible_groups
    user_groups = get_user_accessible_groups(query.from_user.id)
    keyboard = get_groups_keyboard(user_groups, show_all=(role in ['admin', 'big_boss']), selected_group=group_name)
    
    await safe_edit_message(query, message, reply_markup=keyboard, parse_mode=None)


async def handle_sensor_data(query, sensor_id: str):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞"""
    sensor = get_sensor_by_id(sensor_id)
    
    if not sensor:
        await query.edit_message_text(
            format_error_message('data_not_found', f'–î–∞—Ç—á–∏–∫ {sensor_id} –Ω–µ –Ω–∞–π–¥–µ–Ω')
        )
        return
    
    message = format_sensor_message(sensor)
    keyboard = get_sensor_details_keyboard(sensor_id, sensor['group'])
    
    await safe_edit_message(query, message, reply_markup=keyboard)


async def handle_admin_all_data(query, role: str):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (—Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞)"""
    if not is_authorized(query.from_user.id, 'admin'):
        await query.edit_message_text(
            format_error_message('access_denied')
        )
        return
    
    from ...core.auth import get_user_accessible_groups
    
    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_groups = get_user_accessible_groups(query.from_user.id)
    total_sensors = 0
    
    if role == "big_boss":
        message = "üìä –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã (BigBoss)\n\n"
    else:
        message = "üìä –î–∞–Ω–Ω—ã–µ –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø\n\n"
    
    for group in user_groups:
        sensors = get_sensors_by_group(group)
        total_sensors += len(sensors)
        message += f"üìç {group}: {len(sensors)} –¥–∞—Ç—á–∏–∫–æ–≤\n"
    
    if not user_groups:
        message += "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø\n"
    else:
        message += f"\nüìà –ò—Ç–æ–≥–æ: {total_sensors} –¥–∞—Ç—á–∏–∫–æ–≤ –≤ {len(user_groups)} –≥—Ä—É–ø–ø–∞—Ö"
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø –≤–º–µ—Å—Ç–æ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard = get_groups_keyboard(user_groups, show_all=(role in ['admin', 'big_boss']))
    
    await safe_edit_message(query, message, reply_markup=keyboard)


async def handle_admin_thresholds(query, role: str):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (—Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞)"""
    if not is_authorized(query.from_user.id, 'admin'):
        await query.edit_message_text(
            format_error_message('access_denied')
        )
        return
    
    from ...core.auth import get_user_accessible_groups
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Ä–æ–≥–∏
    all_thresholds = ThresholdManager.load_thresholds()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≥—Ä—É–ø–ø–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_groups = get_user_accessible_groups(query.from_user.id)
    user_thresholds = {}
    
    for group in user_groups:
        if group in all_thresholds:
            user_thresholds[group] = all_thresholds[group]
    
    if role == "big_boss":
        message = "üìä –í—Å–µ –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (BigBoss)\n\n" + format_thresholds_message(all_thresholds)
    else:
        message = "üìä –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø\n\n" + format_thresholds_message(user_thresholds)
    
    keyboard = get_main_keyboard(role)
    
    await safe_edit_message(query, message, reply_markup=keyboard)


async def handle_list_admins(query, role: str):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è big_boss)"""
    if not is_authorized(query.from_user.id, 'big_boss'):
        await query.edit_message_text(
            format_error_message('access_denied')
        )
        return
    
    admins = AdminManager.get_all_admins()
    message = format_admin_list_message(admins)
    
    keyboard = get_main_keyboard(role)
    
    await safe_edit_message(query, message, reply_markup=keyboard)


async def handle_system_stats(query, role: str):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_authorized(query.from_user.id, 'admin'):
        await query.edit_message_text(
            format_error_message('access_denied')
        )
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–∞–≤–∞–º –¥–æ—Å—Ç—É–ø–∞
    stats = get_user_statistics(query.from_user.id)
    message = format_statistics_message(stats)
    
    keyboard = get_main_keyboard(role)
    
    await safe_edit_message(query, message, reply_markup=keyboard, parse_mode=None)


async def handle_security_stats(query, role: str):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è big_boss)"""
    if not is_authorized(query.from_user.id, 'big_boss'):
        await query.edit_message_text(
            format_error_message('access_denied')
        )
        return
    
    security_stats = get_security_stats()
    
    message = (
        "üîê –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n\n"
        f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {security_stats.get('active_users', 0)}\n"
        f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {security_stats.get('blocked_users', 0)}\n"
        f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: {security_stats.get('suspicious_users', 0)}\n"
        f"üîç –í—Å–µ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤: {security_stats.get('total_suspicious_incidents', 0)}"
    )
    
    keyboard = get_main_keyboard(role)
    
    await safe_edit_message(query, message, reply_markup=keyboard)


async def handle_help(query):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    keyboard = get_help_keyboard()
    
    help_text = """
‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ —Å–∏—Å—Ç–µ–º–µ

üå°Ô∏è CelsiusPulse Bot - —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å–∫–ª–∞–¥—Å–∫–∏—Ö –ø–æ–º–µ—â–µ–Ω–∏–π.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ –≥—Ä—É–ø–ø–∞–º –ø–æ–º–µ—â–µ–Ω–∏–π
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö

–ù–∞–≤–∏–≥–∞—Ü–∏—è:
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ –º–µ–Ω—é.
    """
    
    await query.edit_message_text(
        help_text, 
        reply_markup=keyboard,
        parse_mode='Markdown'
    )




async def handle_region_selection(query, chat_id: int, region: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    from ..handlers.admin import handle_user_registration, validate_registration_context
    from ...core.monitoring import get_all_groups
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    if not hasattr(handle_user_registration, 'temp_storage'):
        handle_user_registration.temp_storage = {}
        
    context = handle_user_registration.temp_storage.get(chat_id, {})
    
    # –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if not validate_registration_context(context, 'region'):
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n"
            "–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–æ.\n"
            "–ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start",
            parse_mode='Markdown'
        )
        # –û—á–∏—â–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        handle_user_registration.temp_storage.pop(chat_id, None)
        return
    
    # –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    available_groups = get_all_groups()
    if region not in available_groups:
        await query.edit_message_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–≥–∏–æ–Ω\n\n"
            f"–†–µ–≥–∏–æ–Ω '{region}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
            "–ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start",
            parse_mode='Markdown'
        )
        handle_user_registration.temp_storage.pop(chat_id, None)
        return
    
    context['region'] = region
    context['registration_step'] = 'position'
    handle_user_registration.temp_storage[chat_id] = context
    
    await query.edit_message_text(
        f"‚úÖ –†–µ–≥–∏–æ–Ω –≤—ã–±—Ä–∞–Ω: {region}\n\n"
        "üíº –í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:",
        parse_mode='Markdown'
    )


def is_user_in_registration(chat_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    """
    from ..handlers.admin import handle_user_registration
    
    if not hasattr(handle_user_registration, 'temp_storage'):
        return False
    
    context = handle_user_registration.temp_storage.get(chat_id, {})
    return bool(context.get('registration_step'))


def block_if_in_registration(chat_id: int) -> bool:
    """
    –ë–ª–æ–∫–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
    """
    return is_user_in_registration(chat_id)


def registration_guard(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    async def wrapper(query, *args, **kwargs):
        chat_id = query.from_user.id
        if block_if_in_registration(chat_id):
            await query.answer("‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", show_alert=True)
            return
        return await func(query, *args, **kwargs)
    return wrapper


async def handle_toggle_group(query, chat_id: int, group_name: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã"""
    from ..handlers.admin import handle_user_registration
    from ...core.monitoring import get_all_groups
    from ...bot.keyboards import get_registration_groups_keyboard
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if not hasattr(handle_user_registration, 'temp_storage'):
        handle_user_registration.temp_storage = {}
    
    context = handle_user_registration.temp_storage.get(chat_id, {})
    if context.get('registration_step') != 'region':
        await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", show_alert=True)
        return
    
    selected_groups = context.get('selected_groups', [])
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
    if group_name in selected_groups:
        selected_groups.remove(group_name)
    else:
        selected_groups.append(group_name)
    
    context['selected_groups'] = selected_groups
    handle_user_registration.temp_storage[chat_id] = context
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    available_groups = get_all_groups()
    keyboard = get_registration_groups_keyboard(available_groups, selected_groups)
    
    message_text = "üó∫Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω(—ã):\n\n"
    if selected_groups:
        message_text += f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {', '.join(selected_groups)}\n\n"
    message_text += "üí° –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–≥–∏–æ–Ω–æ–≤"
    
    await safe_edit_message(query, message_text, reply_markup=keyboard)


async def handle_finish_group_selection(query, chat_id: int):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    from ..handlers.admin import handle_user_registration
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if not hasattr(handle_user_registration, 'temp_storage'):
        await query.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    context = handle_user_registration.temp_storage.get(chat_id, {})
    if context.get('registration_step') != 'region':
        await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", show_alert=True)
        return
    
    selected_groups = context.get('selected_groups', [])
    if not selected_groups:
        await query.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É –≥—Ä—É–ø–ø—É", show_alert=True)
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    context['registration_step'] = 'position'
    handle_user_registration.temp_storage[chat_id] = context
    
    groups_text = ', '.join(selected_groups)
    await query.edit_message_text(
        f"‚úÖ –ì—Ä—É–ø–ø—ã –≤—ã–±—Ä–∞–Ω—ã: {groups_text}\n\n"
        "üíº –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:",
        parse_mode='Markdown'
    )


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ä–æ–≥–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏

async def handle_settings_thresholds(query, role: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    from ...core.auth import get_user_accessible_groups
    
    user_groups = get_user_accessible_groups(query.from_user.id)
    
    if not user_groups:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–∞–º")
        return
    
    keyboard = []
    for group in user_groups:
        keyboard.append([
            InlineKeyboardButton(f"üîß {group}", callback_data=f"change_threshold_{group}")
        ])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if role == "big_boss":
        message = "‚öôÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (BigBoss)\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:"
    else:
        message = "‚öôÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:"
    
    await safe_edit_message(query, message, reply_markup=reply_markup)


async def handle_change_threshold_group(query, group_name: str, role: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    sensors = get_sensors_by_group(group_name)
    
    if not sensors:
        await query.edit_message_text(f"‚ùå –ù–µ—Ç –¥–∞—Ç—á–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ {group_name}")
        return
    
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—â–∏—Ö –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –≤—Å–µ–π –≥—Ä—É–ø–ø—ã
    keyboard.append([
        InlineKeyboardButton(f"üîß –í—Å—è –≥—Ä—É–ø–ø–∞ {group_name}", callback_data=f"set_threshold_{group_name}_ALL")
    ])
    
    keyboard.append([InlineKeyboardButton("‚ûñ‚ûñ‚ûñ", callback_data="dummy")])
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    for sensor in sensors[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        device_id = sensor['device_id']
        temp = sensor.get('temperature', 'N/A')
        keyboard.append([
            InlineKeyboardButton(
                f"{device_id} ({temp}¬∞C)",
                callback_data=f"set_threshold_{group_name}_{device_id}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º", callback_data="settings_thresholds")
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = f"üå°Ô∏è –ì—Ä—É–ø–ø–∞ {group_name}\n\n"
    message += f"–ù–∞–π–¥–µ–Ω–æ –¥–∞—Ç—á–∏–∫–æ–≤: {len(sensors)}\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–±—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:"
    
    await safe_edit_message(query, message, reply_markup=reply_markup)


async def handle_set_threshold_device(query, group_name: str, device_id: str, role: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø–æ—Ä–æ–≥–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Ö –∏–∑–º–µ–Ω–∏—Ç—å"""
    from ...core.storage import ThresholdManager
    
    current_thresholds = ThresholdManager.load_thresholds()
    current = current_thresholds.get(group_name, {}).get(device_id, {"min": 18.0, "max": 25.0})
    
    if device_id == "ALL":
        message = f"‚öôÔ∏è –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ–π –≥—Ä—É–ø–ø—ã {group_name}\n\n"
        message += f"üå°Ô∏è –ú–∏–Ω–∏–º—É–º: {current['min']}¬∞C\n"
        message += f"üå°Ô∏è –ú–∞–∫—Å–∏–º—É–º: {current['max']}¬∞C\n\n"
        message += "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        message += "`–º–∏–Ω –º–∞–∫—Å`\n"
        message += "–ù–∞–ø—Ä–∏–º–µ—Ä: `18 25`"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞
        temp_storage = getattr(handle_set_threshold_device, 'temp_storage', {})
        temp_storage[query.from_user.id] = {
            'action': 'set_threshold_group',
            'group_name': group_name,
            'device_id': device_id
        }
        handle_set_threshold_device.temp_storage = temp_storage
        
    else:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        sensor = get_sensor_by_id(device_id)
        current_temp = sensor.get('temperature', 'N/A') if sensor else 'N/A'
        
        message = f"‚öôÔ∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device_id}\n"
        message += f"üè¢ –ì—Ä—É–ø–ø–∞: {group_name}\n"
        message += f"üå°Ô∏è –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {current_temp}¬∞C\n\n"
        message += f"–¢–µ–∫—É—â–∏–µ –ø–æ—Ä–æ–≥–∏:\n"
        message += f"üå°Ô∏è –ú–∏–Ω–∏–º—É–º: {current['min']}¬∞C\n"
        message += f"üå°Ô∏è –ú–∞–∫—Å–∏–º—É–º: {current['max']}¬∞C\n\n"
        message += "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        message += "`–º–∏–Ω –º–∞–∫—Å`\n"
        message += "–ù–∞–ø—Ä–∏–º–µ—Ä: `18 25`"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞
        temp_storage = getattr(handle_set_threshold_device, 'temp_storage', {})
        temp_storage[query.from_user.id] = {
            'action': 'set_threshold_device',
            'group_name': group_name,
            'device_id': device_id
        }
        handle_set_threshold_device.temp_storage = temp_storage
    
    keyboard = [[
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º", callback_data=f"change_threshold_{group_name}")
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await safe_edit_message(query, message, reply_markup=reply_markup)


async def handle_confirm_registration_new(query, callback_data: str):
    """–ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –∫–æ—Ä–æ—Ç–∫–∏–º ID"""
    from ..handlers.admin import get_pending_registration, remove_pending_registration
    
    registration_id = callback_data.split(":")[1]
    registration_data = get_pending_registration(registration_id)
    
    if not registration_data:
        await query.answer("‚ùå –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
        
    user_chat_id = registration_data['chat_id']
    fio = registration_data['fio']
    groups = registration_data['groups']
    position = registration_data['position']
    
    logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è {user_chat_id} –≤ –≥—Ä—É–ø–ø–∞—Ö {groups}")
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º ADMIN_GROUPS –≤ –ø–∞–º—è—Ç–∏ –∏ .env —Ñ–∞–π–ª–µ
        from ...core.auth import update_env_file
        
        # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
        import src.core.auth as auth_module
        if user_chat_id not in auth_module.ADMIN_GROUPS:
            auth_module.ADMIN_GROUPS[user_chat_id] = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        for group in groups:
            if group and group not in auth_module.ADMIN_GROUPS[user_chat_id]:
                auth_module.ADMIN_GROUPS[user_chat_id].append(group)
            
        # –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
        update_env_file()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ admins.json
        from ...core.storage import AdminManager
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º nickname –µ—Å–ª–∏ –µ—Å—Ç—å
        try:
            user = await query.get_bot().get_chat(user_chat_id)
            nickname = user.username or ""
        except Exception:
            nickname = ""
            
        AdminManager.save_admin({
            'chat_id': user_chat_id,
            'fio': fio,
            'nickname': nickname,
            'groups': groups,
            'position': position,
            'registered_at': query.message.date.isoformat()
        })
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from ...core.auth import get_user_role
        user_role = get_user_role(user_chat_id)
        groups_text = ', '.join(groups)
        await query.get_bot().send_message(
            chat_id=user_chat_id,
            text=f"‚úÖ –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                 f"üìç –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã: {groups_text}\n"
                 f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}\n"
                 f"üîê –†–æ–ª—å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n"
                 f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!\n"
                 "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
            parse_mode='Markdown'
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await query.edit_message_text(
            f"‚úÖ –ó–ê–Ø–í–ö–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê\n\n"
            f"üë§ {fio}\n"
            f"üó∫Ô∏è –†–µ–≥–∏–æ–Ω—ã: {groups_text}\n"
            f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}\n"
            f"‚è∞ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {query.message.date.strftime('%d.%m.%Y %H:%M')}",
            parse_mode='Markdown'
        )
        
        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        remove_pending_registration(registration_id)
        
        # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.get_bot().unpin_chat_message(
                chat_id=query.message.chat_id,
                message_id=query.message.message_id
            )
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", show_alert=True)


async def handle_reject_registration_new(query, callback_data: str):
    """–ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –∫–æ—Ä–æ—Ç–∫–∏–º ID"""
    from ..handlers.admin import get_pending_registration, remove_pending_registration
    
    registration_id = callback_data.split(":")[1]
    registration_data = get_pending_registration(registration_id)
    
    if not registration_data:
        await query.answer("‚ùå –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
        
    user_chat_id = registration_data['chat_id']
    fio = registration_data['fio']
    
    logger.info(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è {user_chat_id}")
    
    try:
        # –£–î–ê–õ–Ø–ï–ú –¥–∞–Ω–Ω—ã–µ –∏–∑ admins.json –µ—Å–ª–∏ –æ–Ω–∏ —Ç–∞–º –µ—Å—Ç—å
        from ...core.storage import AdminManager
        AdminManager.remove_admin(user_chat_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await query.get_bot().send_message(
            chat_id=user_chat_id,
            text="‚ùå –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n\n"
                 "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
            parse_mode='Markdown'
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await query.edit_message_text(
            f"‚ùå –ó–ê–Ø–í–ö–ê –û–¢–ö–õ–û–ù–ï–ù–ê\n\n"
            f"üë§ {fio}\n"
            f"‚è∞ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {query.message.date.strftime('%d.%m.%Y %H:%M')}",
            parse_mode='Markdown'
        )
        
        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        remove_pending_registration(registration_id)
        
        # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.get_bot().unpin_chat_message(
                chat_id=query.message.chat_id,
                message_id=query.message.message_id
            )
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", show_alert=True)


async def handle_help_sections(query, section: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–µ–∫—Ü–∏–π –ø–æ–º–æ—â–∏ (–∑–∞–≥–ª—É—à–∫–∏)"""
    from ...bot.keyboards import get_help_keyboard
    
    keyboard = get_help_keyboard()
    
    section_names = {
        "help_manual": "üìñ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        "help_support": "üîß –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", 
        "help_contacts": "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã",
        "help_faq": "‚ùì FAQ",
        "help_terms": "üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ",
        "help_license": "üìÑ –õ–∏—Ü–µ–Ω–∑–∏—è",
        "help_codereview": "üîç CodeReview",
        "help_status": "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã",
        "help_changelog": "üîÑ –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π",
        "help_videos": "üì∫ –í–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"
    }
    
    section_name = section_names.get(section, "–ü–æ–º–æ—â—å")
    
    message = f"""
{section_name}

üöß –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ –≥–æ—Ç–æ–≤, –≤–µ–¥—ë—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞.

–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∑–¥–µ—Å—å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–∞–Ω–Ω–æ–º—É —Ä–∞–∑–¥–µ–ª—É.

–ü–æ–∫–∞ —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    
    await safe_edit_message(query, message, reply_markup=keyboard, parse_mode=None)


