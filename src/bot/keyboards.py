"""
–ú–æ–¥—É–ª—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è Telegram –±–æ—Ç–∞
"""
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from typing import List, Optional


def get_main_keyboard(role: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ('admin', 'big_boss')
        
    Returns:
        –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –î–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    # –ù–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
    if role not in ['admin', 'big_boss']:
        return InlineKeyboardMarkup([])
    
    keyboard = []
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    keyboard.append([
        InlineKeyboardButton("üìä –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="my_data"),
        InlineKeyboardButton("üå°Ô∏è –ò–Ω—Ñ–æ", callback_data="select_group")
    ])
    
    keyboard.append([
        InlineKeyboardButton("‚öôÔ∏è –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", callback_data="settings_thresholds"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="system_stats")
    ])
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è big boss
    if role == 'big_boss':
        keyboard.append([
            InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", callback_data="list_admins"),
            InlineKeyboardButton("üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", callback_data="security_stats")
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    keyboard.append([
        InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
    ])
    
    return InlineKeyboardMarkup(keyboard)


def get_groups_keyboard(available_groups: List[str], show_all: bool = False, selected_group: str = None) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏
    
    Args:
        available_groups: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø
        show_all: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É "–í—Å–µ –≥—Ä—É–ø–ø—ã"
        selected_group: –í—ã–±—Ä–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        
    Returns:
        –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    keyboard = []
    
    if not available_groups:
        keyboard.append([
            InlineKeyboardButton("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø", callback_data="no_groups_temp")
        ])
    else:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –∫–Ω–æ–ø–æ–∫
        sorted_groups = sorted(available_groups)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã (–ø–æ 3 –≤ —Ä—è–¥—É)
        for i in range(0, len(sorted_groups), 3):
            row = []
            for j in range(3):
                if i + j < len(sorted_groups):
                    group = sorted_groups[i + j]
                    # –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
                    if selected_group and group == selected_group:
                        button_text = f"‚úÖ{group}"
                    else:
                        button_text = f"{group}"
                    
                    row.append(InlineKeyboardButton(
                        button_text, 
                        callback_data=f"group:{group}"
                    ))
            keyboard.append(row)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if show_all and available_groups:
        keyboard.append([
            InlineKeyboardButton("üåê –í—Å–µ –¥–∞–Ω–Ω—ã–µ", callback_data="show_all_data")
        ])
    
    keyboard.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    ])
    
    return InlineKeyboardMarkup(keyboard)


def get_sensor_details_keyboard(device_id: str, group: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞—Ç—á–∏–∫–∞
    
    Args:
        device_id: ID –¥–∞—Ç—á–∏–∫–∞
        group: –ì—Ä—É–ø–ø–∞ –¥–∞—Ç—á–∏–∫–∞
        
    Returns:
        –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    keyboard = [
        [
            InlineKeyboardButton("üìä –î—Ä—É–≥–∏–µ –≤ –≥—Ä—É–ø–ø–µ", callback_data=f"group:{group}"),
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"sensor:{device_id}")
        ],
        [
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º", callback_data="select_group")
        ]
    ]
    
    return InlineKeyboardMarkup(keyboard)


def get_help_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–º–æ—â–∏
    
    Returns:
        –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    keyboard = [
        [
            InlineKeyboardButton("üìñ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="help_manual"),
            InlineKeyboardButton("üîß –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="help_support")
        ],
        [
            InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="help_contacts"),
            InlineKeyboardButton("‚ùì FAQ", callback_data="help_faq")
        ],
        [
            InlineKeyboardButton("üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", callback_data="help_terms"),
            InlineKeyboardButton("üìÑ –õ–∏—Ü–µ–Ω–∑–∏—è", callback_data="help_license")
        ],
        [
            InlineKeyboardButton("üîç CodeReview", callback_data="help_codereview"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="help_status")
        ],
        [
            InlineKeyboardButton("üîÑ –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π", callback_data="help_changelog"),
            InlineKeyboardButton("üì∫ –í–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="help_videos")
        ],
        [
            InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        ]
    ]
    
    return InlineKeyboardMarkup(keyboard)


def get_persistent_keyboard(user_id: int, current_keyboard: Optional[InlineKeyboardMarkup] = None, is_main_menu: bool = False, is_registration: bool = False) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_keyboard: –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        is_main_menu: True –µ—Å–ª–∏ —ç—Ç–æ —É–∂–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞)
        is_registration: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é)
        
    Returns:
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    from src.core.auth import get_user_role
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    role = get_user_role(user_id)
    
    # –ï—Å–ª–∏ —ç—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    if is_main_menu:
        if current_keyboard:
            return current_keyboard
        else:
            return get_main_keyboard(role)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if is_registration:
        if current_keyboard:
            return current_keyboard
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            return InlineKeyboardMarkup([])
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (–Ω–æ –ù–ï –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å /start
    if role not in ['admin', 'big_boss']:
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–µ–π –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if current_keyboard and current_keyboard.inline_keyboard:
        keyboard = []
        for row in current_keyboard.inline_keyboard:
            keyboard.append(row)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        has_main_button = False
        for row in keyboard:
            for button in row:
                if button.callback_data == "back_to_main":
                    has_main_button = True
                    break
            if has_main_button:
                break
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not has_main_button:
            keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])
        
        return InlineKeyboardMarkup(keyboard)
    
    # –ï—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    return get_main_keyboard(role)


def get_quick_main_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—à–∏–±–æ–∫ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])


def get_registration_groups_keyboard(available_groups: List[str], selected_groups: List[str] = None) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏ –¢–û–õ–¨–ö–û –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º
    
    Args:
        available_groups: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø
        selected_groups: –°–ø–∏—Å–æ–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
        
    Returns:
        –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    keyboard = []
    selected_groups = selected_groups or []
    
    if not available_groups:
        keyboard.append([
            InlineKeyboardButton("‚ö†Ô∏è –ì—Ä—É–ø–ø—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", callback_data="no_groups_registration")
        ])
    else:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –∫–Ω–æ–ø–æ–∫
        sorted_groups = sorted(available_groups)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã (–ø–æ 3 –≤ —Ä—è–¥—É)
        for i in range(0, len(sorted_groups), 3):
            row = []
            for j in range(3):
                if i + j < len(sorted_groups):
                    group = sorted_groups[i + j]
                    # –û—Ç–º–µ—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –≥–∞–ª–æ—á–∫–æ–π
                    if group in selected_groups:
                        button_text = f"‚úÖ {group}"
                    else:
                        button_text = f"{group}"
                    
                    row.append(InlineKeyboardButton(
                        button_text, 
                        callback_data=f"toggle_group:{group}"
                    ))
            keyboard.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        if selected_groups:
            keyboard.append([
                InlineKeyboardButton(
                    f"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä ({len(selected_groups)} –≥—Ä—É–ø–ø)", 
                    callback_data="finish_group_selection"
                )
            ])
        else:
            keyboard.append([
                InlineKeyboardButton(
                    "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É –≥—Ä—É–ø–ø—É", 
                    callback_data="need_select_group"
                )
            ])
    
    return InlineKeyboardMarkup(keyboard)


