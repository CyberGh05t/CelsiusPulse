"""
–ú–æ–¥—É–ª—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–∞
"""
from datetime import datetime
from typing import Dict, List, Any
from ..core.monitoring import format_timestamp
from ..core.storage import ThresholdManager
from ..utils.validators import sanitize_string, escape_markdown




def format_sensor_message(sensor: Dict[str, Any], escape_md: bool = False) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∞ –≤ —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    Args:
        sensor: –î–∞–Ω–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∞
        escape_md: –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ª–∏ —Å–∏–º–≤–æ–ª—ã –º–∞—Ä–∫–¥–∞—É–Ω–∞
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        device_id = sanitize_string(str(sensor.get("device_id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")))
        group = sanitize_string(str(sensor.get("group", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")))
        temperature = sensor.get("temperature", 0)
        validation_status = sensor.get("validation_status", "unknown")
        validation_errors = sensor.get("validation_errors", [])
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ timestamp
        try:
            timestamp = int(sensor.get("timestamp", int(datetime.now().timestamp())))
            formatted_time = format_timestamp(timestamp)
        except (ValueError, TypeError):
            formatted_time = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è"
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        try:
            temp_value = float(temperature) if temperature not in [None, "", "invalid"] else 0
        except (ValueError, TypeError):
            temp_value = 0
            temperature = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–∞—Ç—á–∏–∫–∞
        raw_device_id = sensor.get("device_id", "")
        threshold_info = ""
        min_temp_value = None
        max_temp_value = None
        
        try:
            threshold = ThresholdManager.get_device_threshold(raw_device_id, group)
            if threshold:
                min_temp_value = threshold.get('min')
                max_temp_value = threshold.get('max')
                min_temp_display = min_temp_value if min_temp_value is not None else '–Ω–µ –∑–∞–¥–∞–Ω'
                max_temp_display = max_temp_value if max_temp_value is not None else '–Ω–µ –∑–∞–¥–∞–Ω'
                threshold_info = f"üìä –ü–æ—Ä–æ–≥–∏: {min_temp_display}¬∞C ‚Äî {max_temp_display}¬∞C"
            else:
                threshold_info = "üìä –ü–æ—Ä–æ–≥–∏: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
        except Exception:
            threshold_info = "üìä –ü–æ—Ä–æ–≥–∏: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ —Å—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
        if validation_status == "invalid":
            status_icon = "‚ö†Ô∏è"
            temp_icon = "‚ùì"
        else:
            status_icon = "‚úÖ"
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if min_temp_value is not None and temp_value < min_temp_value:
                temp_icon = "ü•∂"
            elif max_temp_value is not None and temp_value > max_temp_value:
                temp_icon = "ü•µ"
            elif (min_temp_value is not None and max_temp_value is not None and 
                  min_temp_value <= temp_value <= max_temp_value):
                temp_icon = "üëç"
            else:
                temp_icon = "üö®"

        message_parts = [
            f"{status_icon} {temp_icon} {escape_markdown(device_id) if escape_md else device_id}",
            f"üìç –ì—Ä—É–ø–ø–∞: {group}",
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C",
            threshold_info,
            f"‚è∞ –í—Ä–µ–º—è: {formatted_time}"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if validation_status == "invalid" and validation_errors:
            message_parts.append("")
            message_parts.append("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï - –ù–ï–í–ê–õ–ò–î–ù–´–ï –î–ê–ù–ù–´–ï:")
            for error in validation_errors:
                message_parts.append(f"‚Ä¢ {error}")
        
        return "\n".join(message_parts)
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–∞: {str(e)}"


def format_group_sensors_message(group_name: str, sensors: List[Dict[str, Any]]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∞—Ç—á–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
    
    Args:
        group_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        sensors: –°–ø–∏—Å–æ–∫ –¥–∞—Ç—á–∏–∫–æ–≤
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    if not sensors:
        return f"üìä **–ì—Ä—É–ø–ø–∞: {group_name}**\n\n‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤"
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    valid_sensors = [s for s in sensors if s.get('validation_status') == 'valid']
    invalid_sensors = [s for s in sensors if s.get('validation_status') == 'invalid']
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    header = f"üìä –ì—Ä—É–ø–ø–∞: {group_name} ({len(sensors)} –¥–∞—Ç—á–∏–∫–æ–≤)"
    if invalid_sensors:
        header += f"\n‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {len(invalid_sensors)} –∏–∑ {len(sensors)}"
    
    message_parts = [header, "=" * 30]
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏
    for sensor in valid_sensors:
        sensor_msg = format_sensor_message(sensor)
        message_parts.append(sensor_msg)
        message_parts.append("-" * 20)
    
    # –ó–∞—Ç–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏ —Å –ø–æ–º–µ—Ç–∫–æ–π
    if invalid_sensors:
        message_parts.append("‚ö†Ô∏è –î–ê–¢–ß–ò–ö–ò –° –ù–ï–í–ê–õ–ò–î–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò:")
        message_parts.append("=" * 25)
        for sensor in invalid_sensors:
            sensor_msg = format_sensor_message(sensor)
            message_parts.append(sensor_msg)
            message_parts.append("-" * 20)
    
    return "\n".join(message_parts)


def format_welcome_message(fio: str = "", position: str = "", is_new_user: bool = True, chat_id: int = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    Args:
        fio: –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        position: –î–æ–ª–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_new_user: –ù–æ–≤—ã–π –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    if is_new_user:
        message = (
            "üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CelsiusPulse Bot!**\n\n"
            "üå°Ô∏è –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å–∫–ª–∞–¥—Å–∫–∏—Ö –ø–æ–º–µ—â–µ–Ω–∏–π\n"
        )
        
        if chat_id:
            message += f"üÜî –í–∞—à —á–∞—Ç ID: `{chat_id}`\n\n"
        else:
            message += "\n"
            
        message += (
            "üìù –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.\n"
            "–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n\n"
            "üí° –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –Ω–∞–ø–∏—à–∏—Ç–µ: **—Å–±—Ä–æ—Å**"
        )
        
        return message
    else:
        greeting = f"üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {fio}!**\n\n"
        if position:
            greeting += f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}\n\n"
        
        greeting += (
            "üå°Ô∏è **CelsiusPulse Bot** - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )
        return greeting


def format_alert_message(sensor: Dict[str, Any], alert_type: str, threshold_info: str = "") -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    
    Args:
        sensor: –î–∞–Ω–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∞
        alert_type: –¢–∏–ø —Ç—Ä–µ–≤–æ–≥–∏ ('high', 'low')  
        threshold_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö
        
    Returns:
        –°–æ–æ–±—â–µ–Ω–∏–µ —Ç—Ä–µ–≤–æ–≥–∏
    """
    device_id = sanitize_string(str(sensor.get("device_id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")))
    group = sanitize_string(str(sensor.get("group", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")))
    temperature = sensor.get("temperature", 0)
    timestamp = sensor.get("timestamp", int(datetime.now().timestamp()))
    
    # –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–µ–≤–æ–≥
    alert_icons = {
        'high': 'üî•üö®',
        'low': 'ü•∂‚ùÑÔ∏è',
        'critical': '‚ö†Ô∏èüÜò'
    }
    
    icon = alert_icons.get(alert_type, '‚ö†Ô∏è')
    
    message = (
        f"{icon} –¢–ï–ú–ü–ï–†–ê–¢–£–†–ù–ê–Ø –¢–†–ï–í–û–ì–ê {icon}\n\n"
        f"üè∑Ô∏è –î–∞—Ç—á–∏–∫: {escape_markdown(device_id)}\n"
        f"üìç –ì—Ä—É–ø–ø–∞: {group}\n"
        f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n"
        f"‚è∞ –í—Ä–µ–º—è: {format_timestamp(timestamp)}\n"
    )
    
    if threshold_info:
        message += f"üìä –ü–æ—Ä–æ–≥–∏: {threshold_info}\n"
    
    message += "\nüîî –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ!"
    
    return message


def format_admin_list_message(admins: List[Dict[str, Any]]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    
    Args:
        admins: –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    if not admins:
        return "üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n\n‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"
    
    message_parts = [f"üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ ({len(admins)} —á–µ–ª.)"]
    message_parts.append("=" * 40)
    
    for i, admin in enumerate(admins, 1):
        fio = admin.get('fio', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        position = admin.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        groups = admin.get('groups', [])
        registered = admin.get('registered', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        admin_info = (
            f"{i}. {fio}\n"
            f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}\n"
            f"üìã –ì—Ä—É–ø–ø—ã: {', '.join(groups) if groups else '–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø'}\n"
            f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {registered}"
        )
        
        message_parts.append(admin_info)
        message_parts.append("-" * 25)
    
    return "\n".join(message_parts)


def format_thresholds_message(thresholds: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    
    Args:
        thresholds: –°–ª–æ–≤–∞—Ä—å —Å –ø–æ—Ä–æ–≥–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    if not thresholds:
        return "üìä –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è\n\n‚ùå –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"
    
    message_parts = ["üìä –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"]
    message_parts.append("=" * 40)
    
    for group_name, devices in thresholds.items():
        if isinstance(devices, dict):
            message_parts.append(f"üìç –ì—Ä—É–ø–ø–∞: {group_name}")
            
            for device_id, values in devices.items():
                if isinstance(values, dict):
                    min_temp = values.get('min', '–Ω–µ —É–∫–∞–∑–∞–Ω')
                    max_temp = values.get('max', '–Ω–µ —É–∫–∞–∑–∞–Ω') 
                    
                    device_info = (
                        f"  üå°Ô∏è {escape_markdown(device_id)}: "
                        f"{min_temp}¬∞C ‚Äî {max_temp}¬∞C"
                    )
                    message_parts.append(device_info)
            
            message_parts.append("")
    
    return "\n".join(message_parts)


def format_statistics_message(stats: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π –ø—Ä–æ–±–ª–µ–º
    
    Args:
        stats: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    total = stats.get('total_sensors', 0)
    valid = stats.get('valid_sensors', 0)
    invalid = stats.get('invalid_sensors', 0)
    critical = stats.get('critical_sensors', 0)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
    message = (
        "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n\n"
        f"üå°Ô∏è –í—Å–µ–≥–æ –¥–∞—Ç—á–∏–∫–æ–≤: {total}  \n"
        f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: {valid} | ‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {invalid} | üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {critical}\n"
        f"üìä –ì—Ä—É–ø–ø: {stats.get('total_groups', 0)} | üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats.get('last_update', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
    )
    
    # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø—Ä–æ–±–ª–µ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
    validation_errors = stats.get('validation_errors_analysis', {})
    critical_issues = stats.get('critical_issues_analysis', {})
    groups_breakdown = stats.get('groups_breakdown', {})
    problem_sensors = stats.get('problem_sensors', {})
    
    if validation_errors or critical_issues:
        message += "\n\nüîç –ü—Ä–æ–±–ª–µ–º—ã:"
        
        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤
        if validation_errors:
            error_parts = []
            for error_type, count in validation_errors.items():
                error_parts.append(f"{error_type} ({count})")
            message += f"\n‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ: {', '.join(error_parts)}"
        
        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
        if critical_issues:
            critical_parts = []
            for issue_type, count in critical_issues.items():
                critical_parts.append(f"{issue_type} ({count})")
            message += f"\nüî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ: {', '.join(critical_parts)}"
    
    # –°–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ "–≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ"
    if groups_breakdown:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –≤ –≥—Ä—É–ø–ø–∞—Ö
        has_problems = False
        for group_stats in groups_breakdown.values():
            if group_stats.get('critical', 0) > 0 or group_stats.get('invalid', 0) > 0:
                has_problems = True
                break
        
        if not has_problems and invalid == 0 and critical == 0:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º –≤–æ–æ–±—â–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–æ–∫–∞–∏–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message += "\n\nüåôüí§ –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ —Ä–∞–º–∫–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π. –°–ø–∏—Ç–µ —Å–ø–æ–∫–æ–π–Ω–æ üò¥‚ú®"
        else:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏
            message += "\n\nüìä –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏:"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞—Ç—á–∏–∫–∏
            critical_sensors = problem_sensors.get('critical', [])
            if critical_sensors:
                for sensor in critical_sensors[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
                    device_id = sensor.get('device_id', 'N/A')
                    group = sensor.get('group', 'N/A')
                    
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ (–ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç)
                    from ..core.monitoring import get_sensor_problem_emoji_and_description
                    emoji, description = get_sensor_problem_emoji_and_description(sensor, is_critical=True)
                    message += f"\n{emoji} {group}/{device_id}: {description}"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏
            invalid_sensors = problem_sensors.get('invalid', [])
            if invalid_sensors:
                for sensor in invalid_sensors[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
                    device_id = sensor.get('device_id', 'N/A')
                    group = sensor.get('group', 'N/A')
                    
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ (–ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç)
                    from ..core.monitoring import get_sensor_problem_emoji_and_description
                    emoji, description = get_sensor_problem_emoji_and_description(sensor, is_critical=False)
                    message += f"\n{emoji} {group}/{device_id}: {description}"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ—Å–ª–∏ –¥–∞—Ç—á–∏–∫–æ–≤ –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞
            total_problems = len(critical_sensors) + len(invalid_sensors)
            if total_problems > 10:
                message += f"\n... –∏ –µ—â—ë {total_problems - 10} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤"
    
    return message


def format_error_message(error_type: str, details: str = "") -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    
    Args:
        error_type: –¢–∏–ø –æ—à–∏–±–∫–∏
        details: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
        
    Returns:
        –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    error_messages = {
        'access_denied': 'üö´ **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω**\n\n–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.',
        'invalid_input': '‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.',
        'data_not_found': 'üîç **–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n\n–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.',
        'system_error': '‚ö†Ô∏è **–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞**\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        'rate_limited': '‚è≥ **–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤**\n\n–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.',
        'maintenance': 'üîß **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ**\n\n–°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.'
    }
    
    message = error_messages.get(error_type, '‚ùå **–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞**')
    
    if details:
        message += f"\n\nüìù –î–µ—Ç–∞–ª–∏: {sanitize_string(details)}"
    
    return message