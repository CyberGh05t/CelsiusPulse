import pytest
import asyncio
from unittest.mock import patch, Mock, AsyncMock
from datetime import datetime, timedelta
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ main.py
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


class TestNotificationSystem:
    """–¢–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    @pytest.fixture
    def mock_application(self):
        """Mock –¥–ª—è telegram application"""
        app = Mock()
        app.bot = AsyncMock()
        return app

    @pytest.fixture
    def sample_alert_sensor(self):
        """–î–∞—Ç—á–∏–∫ —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤"""
        return {
            'device_id': 'critical_sensor',
            'group': 'TestGroup',
            'temperature': -20.0,  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
            'timestamp': int(datetime.now().timestamp())
        }

    @pytest.fixture
    def sample_normal_sensor(self):
        """–î–∞—Ç—á–∏–∫ —Å –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π"""
        return {
            'device_id': 'normal_sensor', 
            'group': 'TestGroup',
            'temperature': 25.0,  # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
            'timestamp': int(datetime.now().timestamp())
        }

    @pytest.mark.asyncio
    async def test_alert_cooldown_mechanism(self, mock_application):
        """–¢–µ—Å—Ç –º–µ—Ö–∞–Ω–∏–∑–º–∞ cooldown –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        sensor_id = 'test_sensor'
        current_time = datetime.now()
        
        with patch('main.last_alert_time', {}) as mock_last_alert, \
             patch('main.datetime') as mock_datetime:
            
            mock_datetime.now.return_value = current_time
            
            from main import last_alert_time
            
            # –ü–µ—Ä–≤—ã–π –∞–ª–µ—Ä—Ç - –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è
            should_send_first = sensor_id not in last_alert_time
            assert should_send_first is True
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–ª–µ—Ä—Ç–∞
            last_alert_time[sensor_id] = current_time
            
            # –í—Ç–æ—Ä–æ–π –∞–ª–µ—Ä—Ç —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç - –Ω–µ –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è (cooldown 10 –º–∏–Ω—É—Ç)
            mock_datetime.now.return_value = current_time + timedelta(minutes=5)
            time_since_last = (mock_datetime.now() - last_alert_time[sensor_id]).total_seconds()
            should_send_second = time_since_last >= 600  # 10 –º–∏–Ω—É—Ç cooldown
            assert should_send_second is False
            
            # –¢—Ä–µ—Ç–∏–π –∞–ª–µ—Ä—Ç —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç - –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è
            mock_datetime.now.return_value = current_time + timedelta(minutes=15)
            time_since_last = (mock_datetime.now() - last_alert_time[sensor_id]).total_seconds()
            should_send_third = time_since_last >= 600
            assert should_send_third is True

    @pytest.mark.asyncio
    async def test_send_alert_to_authorized_users(self, mock_application, sample_alert_sensor):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        with patch('main.application', mock_application), \
             patch('main.CHAT_GROUPS', {123: 'TestGroup', 456: 'OtherGroup'}), \
             patch('main.ADMIN_GROUPS', {789: 'TestGroup'}), \
             patch('main.BIG_BOSS', {111}):
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≥—Ä—É–ø–ø—ã TestGroup
            expected_recipients = [123, 789, 111]  # user, admin, big_boss
            
            for chat_id in expected_recipients:
                await mock_application.bot.send_message(
                    chat_id=chat_id,
                    text=f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê!\n"
                         f"–î–∞—Ç—á–∏–∫: {sample_alert_sensor['device_id']}\n"
                         f"–ì—Ä—É–ø–ø–∞: {sample_alert_sensor['group']}\n"
                         f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {sample_alert_sensor['temperature']}¬∞C"
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω—É–∂–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            assert mock_application.bot.send_message.call_count == len(expected_recipients)

    @pytest.mark.asyncio
    async def test_no_alert_for_normal_temperature(self, sample_normal_sensor):
        """–¢–µ—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ"""
        thresholds = {
            'TestGroup': {
                'normal_sensor': {'min': 20, 'max': 30}
            }
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –Ω–æ—Ä–º–µ
        sensor = sample_normal_sensor
        threshold = thresholds[sensor['group']][sensor['device_id']]
        
        is_critical = (sensor['temperature'] < threshold['min'] or 
                      sensor['temperature'] > threshold['max'])
        
        assert is_critical is False

    @pytest.mark.asyncio
    async def test_alert_for_critical_temperature(self, sample_alert_sensor):
        """–¢–µ—Å—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ"""
        thresholds = {
            'TestGroup': {
                'critical_sensor': {'min': -5, 'max': 40}
            }
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è
        sensor = sample_alert_sensor
        threshold = thresholds[sensor['group']][sensor['device_id']]
        
        is_critical = (sensor['temperature'] < threshold['min'] or 
                      sensor['temperature'] > threshold['max'])
        
        assert is_critical is True

    @pytest.mark.asyncio
    async def test_alert_message_formatting(self, sample_alert_sensor):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        from main import format_timestamp
        
        sensor = sample_alert_sensor
        expected_parts = [
            "üö®",  # –≠–º–æ–¥–∑–∏ —Ç—Ä–µ–≤–æ–≥–∏
            "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê" or "–¢–ï–ú–ü–ï–†–ê–¢–£–†–ù–´–ô –ê–õ–ï–†–¢",
            sensor['device_id'],
            sensor['group'],
            str(sensor['temperature']),
            "¬∞C"
        ]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ –∫–æ–¥–µ
        message = (
            f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê!\n"
            f"–î–∞—Ç—á–∏–∫: {sensor['device_id']}\n"
            f"–ì—Ä—É–ø–ø–∞: {sensor['group']}\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {sensor['temperature']}¬∞C\n"
            f"–í—Ä–µ–º—è: {format_timestamp(sensor['timestamp'])}"
        )
        
        for part in expected_parts:
            assert part in message

    @pytest.mark.asyncio
    async def test_user_group_filtering_for_alerts(self, sample_alert_sensor):
        """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≥—Ä—É–ø–ø–∞–º –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        chat_groups = {
            123: 'TestGroup',    # –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            456: 'OtherGroup',   # –ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            789: 'TestGroup'     # –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        }
        admin_groups = {
            111: 'TestGroup',    # –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            222: 'OtherGroup'    # –ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        }
        big_boss = {333}  # –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        sensor_group = sample_alert_sensor['group']  # 'TestGroup'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ç–æ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        recipients = []
        
        # –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        for chat_id, group in chat_groups.items():
            if group == sensor_group:
                recipients.append(chat_id)
        
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
        for chat_id, group in admin_groups.items():
            if group == sensor_group:
                recipients.append(chat_id)
                
        # Big boss –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ
        recipients.extend(big_boss)
        
        expected_recipients = [123, 789, 111, 333]
        assert sorted(recipients) == sorted(expected_recipients)

    @pytest.mark.asyncio
    async def test_alert_retry_on_telegram_error(self, mock_application):
        """–¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ Telegram API"""
        import telegram.error
        
        # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ - –æ—à–∏–±–∫–∞, –≤—Ç–æ—Ä–æ–π - —É—Å–ø–µ—Ö
        mock_application.bot.send_message.side_effect = [
            telegram.error.NetworkError("Network error"),
            None  # –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        ]
        
        chat_id = 123
        message = "Test alert message"
        max_retries = 3
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º retry –ª–æ–≥–∏–∫—É
        for attempt in range(max_retries):
            try:
                await mock_application.bot.send_message(chat_id=chat_id, text=message)
                break  # –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            except telegram.error.TelegramError:
                if attempt == max_retries - 1:
                    raise  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞
                await asyncio.sleep(1)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ 2 –ø–æ–ø—ã—Ç–∫–∏ (1 –Ω–µ—É–¥–∞—á–Ω–∞—è + 1 —É—Å–ø–µ—à–Ω–∞—è)
        assert mock_application.bot.send_message.call_count == 2

    @pytest.mark.parametrize("temperature,min_temp,max_temp,expected_alert_type", [
        (-30, -10, 40, "cold"),     # –•–æ–ª–æ–¥–Ω–æ
        (50, -10, 40, "hot"),       # –ñ–∞—Ä–∫–æ
        (25, -10, 40, None),        # –ù–æ—Ä–º–∞
        (-10, -10, 40, None),       # –ù–∞ –≥—Ä–∞–Ω–∏—Ü–µ –º–∏–Ω–∏–º—É–º–∞
        (40, -10, 40, None),        # –ù–∞ –≥—Ä–∞–Ω–∏—Ü–µ –º–∞–∫—Å–∏–º—É–º–∞
    ])
    def test_alert_type_detection(self, temperature, min_temp, max_temp, expected_alert_type):
        """–ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        def get_alert_type(temp, min_val, max_val):
            if temp < min_val:
                return "cold"
            elif temp > max_val:
                return "hot"
            return None
        
        alert_type = get_alert_type(temperature, min_temp, max_temp)
        assert alert_type == expected_alert_type

    @pytest.mark.asyncio
    async def test_bulk_alert_sending(self, mock_application):
        """–¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        recipients = [123, 456, 789, 111]
        message = "Bulk alert test"
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º
        for chat_id in recipients:
            await mock_application.bot.send_message(chat_id=chat_id, text=message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        assert mock_application.bot.send_message.call_count == len(recipients)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent_chat_ids = [call[1]['chat_id'] for call in mock_application.bot.send_message.call_args_list]
        assert sorted(sent_chat_ids) == sorted(recipients)