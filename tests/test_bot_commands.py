import pytest
import asyncio
from unittest.mock import patch, Mock, AsyncMock
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ main.py
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


class TestBotCommands:
    """–¢–µ—Å—Ç—ã –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""

    @pytest.mark.asyncio
    async def test_start_command_new_user(self, sample_update, mock_context, mock_env):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with patch('main.load_admin_info') as mock_load_admin:
            mock_load_admin.return_value = {"groups": []}
            
            from main import start
            await start(sample_update, mock_context)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
            mock_context.bot.send_message.assert_called()
            args = mock_context.bot.send_message.call_args[1]
            assert "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å" in args['text'] or "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" in args['text']

    @pytest.mark.asyncio
    async def test_start_command_existing_user(self, sample_update, mock_context, mock_env):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with patch('main.load_admin_info') as mock_load_admin, \
             patch('main.show_interface') as mock_show_interface:
            
            mock_load_admin.return_value = {'fio': 'Test User', 'position': 'Tester', 'groups': []}
            
            from main import start
            await start(sample_update, mock_context)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            mock_show_interface.assert_called_once()

    @pytest.mark.asyncio
    async def test_show_interface_regular_user(self, sample_update, mock_context, mock_env):
        """–¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with patch('main.get_user_role') as mock_get_role, \
             patch('main.CHAT_GROUPS', {123: 'Group1'}):
            
            mock_get_role.return_value = 'user'
            
            from main import show_interface
            await show_interface(sample_update, mock_context, 'user')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            mock_context.bot.send_message.assert_called_once()
            args = mock_context.bot.send_message.call_args[1]
            assert 'reply_markup' in args

    @pytest.mark.asyncio
    async def test_show_interface_admin_user(self, sample_update, mock_context, mock_env):
        """–¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        with patch('main.get_user_role') as mock_get_role, \
             patch('main.ADMIN_GROUPS', {123: 'Admin1'}):
            
            mock_get_role.return_value = 'admin'
            
            from main import show_interface
            await show_interface(sample_update, mock_context, 'admin')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            mock_context.bot.send_message.assert_called_once()
            args = mock_context.bot.send_message.call_args[1]
            assert 'reply_markup' in args
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
            keyboard = args['reply_markup'].inline_keyboard
            button_texts = [button.text for row in keyboard for button in row]
            assert any('üè¢ –í—Å–µ –≥—Ä—É–ø–ø—ã' in text for text in button_texts)

    @pytest.mark.asyncio
    async def test_show_interface_big_boss(self, sample_update, mock_context, mock_env):
        """–¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è big boss"""
        with patch('main.get_user_role') as mock_get_role, \
             patch('main.BIG_BOSS', {123}):
            
            mock_get_role.return_value = 'big_boss'
            
            from main import show_interface
            await show_interface(sample_update, mock_context, 'big_boss')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            mock_context.bot.send_message.assert_called_once()
            args = mock_context.bot.send_message.call_args[1]
            assert 'reply_markup' in args
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫ big boss
            keyboard = args['reply_markup'].inline_keyboard
            button_texts = [button.text for row in keyboard for button in row]
            assert any('üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤' in text for text in button_texts)

    @pytest.mark.asyncio
    async def test_select_group_with_data(self, sample_update, mock_context, mock_env, sample_sensor_data):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã —Å –¥–∞–Ω–Ω—ã–º–∏"""
        with patch('main.sensor_data_cache', sample_sensor_data['message']):
            
            from main import select_group
            await select_group(sample_update, mock_context)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥—Ä—É–ø–ø–∞–º–∏
            mock_context.bot.send_message.assert_called_once()
            args = mock_context.bot.send_message.call_args[1]
            assert 'reply_markup' in args
            keyboard = args['reply_markup'].inline_keyboard
            button_texts = [button.text for row in keyboard for button in row]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥—Ä—É–ø–ø –∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            assert any('Group1' in text for text in button_texts)
            assert any('Group2' in text for text in button_texts)

    @pytest.mark.asyncio
    async def test_select_group_no_data(self, sample_update, mock_context, mock_env):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö"""
        with patch('main.sensor_data_cache', []):
            
            from main import select_group
            await select_group(sample_update, mock_context)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            mock_context.bot.send_message.assert_called_once()
            args = mock_context.bot.send_message.call_args[1]
            assert "–î–∞–Ω–Ω—ã–µ –¥–∞—Ç—á–∏–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã" in args['text']

    @pytest.mark.asyncio
    async def test_admin_all_thresholds(self, sample_update, mock_context, mock_env):
        """–¢–µ—Å—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        with patch('main.get_user_role') as mock_get_role, \
             patch('main.load_thresholds') as mock_load_thresholds:
            
            mock_get_role.return_value = 'admin'
            mock_load_thresholds.return_value = {
                'Group1': {'sensor_1': {'min': 20, 'max': 30}},
                'Group2': {'sensor_2': {'min': -5, 'max': 5}}
            }
            
            from main import admin_all_thresholds
            await admin_all_thresholds(sample_update, mock_context)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Ä–æ–≥–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            mock_context.bot.send_message.assert_called_once()
            args = mock_context.bot.send_message.call_args[1]
            assert 'Group1' in args['text']
            assert 'sensor_1' in args['text']

    @pytest.mark.asyncio  
    async def test_admin_all_thresholds_unauthorized(self, sample_update, mock_context, mock_env):
        """–¢–µ—Å—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        with patch('main.get_user_role') as mock_get_role:
            
            mock_get_role.return_value = 'user'
            
            from main import admin_all_thresholds
            await admin_all_thresholds(sample_update, mock_context)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –¥–æ—Å—Ç—É–ø–∞
            mock_context.bot.send_message.assert_called_once()
            args = mock_context.bot.send_message.call_args[1]
            assert "–¥–æ—Å—Ç—É–ø–∞" in args['text'] or "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤" in args['text']

    @pytest.mark.asyncio
    async def test_list_admins_big_boss(self, sample_update, mock_context, mock_env):
        """–¢–µ—Å—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ big boss"""
        with patch('main.get_user_role') as mock_get_role, \
             patch('main.ADMIN_GROUPS', {789: 'Admin1', 456: 'Admin2'}), \
             patch('main.load_admin_info') as mock_load_admin:
            
            mock_get_role.return_value = 'big_boss'
            mock_load_admin.side_effect = [
                {'fio': 'Admin User 1', 'position': 'Manager'},
                {'fio': 'Admin User 2', 'position': 'Supervisor'}
            ]
            
            from main import list_admins
            await list_admins(sample_update, mock_context)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            mock_context.bot.send_message.assert_called_once()
            args = mock_context.bot.send_message.call_args[1]
            assert 'Admin User 1' in args['text']
            assert 'Manager' in args['text']

    @pytest.mark.asyncio
    async def test_list_admins_unauthorized(self, sample_update, mock_context, mock_env):
        """–¢–µ—Å—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        with patch('main.get_user_role') as mock_get_role:
            
            mock_get_role.return_value = 'user'
            
            from main import list_admins
            await list_admins(sample_update, mock_context)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –¥–æ—Å—Ç—É–ø–∞
            mock_context.bot.send_message.assert_called_once()
            args = mock_context.bot.send_message.call_args[1]
            assert "–¥–æ—Å—Ç—É–ø–∞" in args['text'] or "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤" in args['text']