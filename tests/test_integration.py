import pytest
import asyncio
import json
import tempfile
import os
from unittest.mock import patch, Mock, AsyncMock
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ main.py
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


@pytest.mark.integration
class TestIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""

    @pytest.mark.asyncio
    async def test_full_monitoring_cycle(self, sample_sensor_data, sample_thresholds, temp_files):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"""
        with patch('main.THRESHOLDS_FILE', temp_files['thresholds']), \
             patch('main.DOGET_URL', 'https://test.url'), \
             patch('requests.get') as mock_get:
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            with open(temp_files['thresholds'], 'w', encoding='utf-8') as f:
                json.dump(sample_thresholds, f, ensure_ascii=False, indent=2)
            
            mock_response = Mock()
            mock_response.status_code = 200
            mock_response.json.return_value = sample_sensor_data
            mock_get.return_value = mock_response
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ç—á–µ–π
            from main import fetch_sensor_data, load_thresholds
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª
            sensor_data = await fetch_sensor_data()
            thresholds = load_thresholds()
            
            assert sensor_data == sample_sensor_data['message']
            assert thresholds == sample_thresholds
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
            for sensor in sensor_data:
                device_id = sensor['device_id']
                group = sensor['group']
                temperature = sensor['temperature']
                
                if group in thresholds and device_id in thresholds[group]:
                    threshold = thresholds[group][device_id]
                    is_critical = (temperature < threshold['min'] or 
                                 temperature > threshold['max'])
                    
                    if sensor['device_id'] == 'sensor_2':  # -10.0 —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
                        assert is_critical is True
                    else:
                        assert is_critical is False

    @pytest.mark.asyncio
    async def test_user_workflow_start_to_data_view(self, sample_update, mock_context, mock_env, sample_sensor_data):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –æ—Ç —Å—Ç–∞—Ä—Ç–∞ –¥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        with patch('main.load_admin_info') as mock_load_admin, \
             patch('main.sensor_data_cache', sample_sensor_data['message']), \
             patch('main.CHAT_GROUPS', {123: 'Group1'}):
            
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            mock_load_admin.return_value = None
            
            from main import start, show_interface, show_group_data
            
            # 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
            await start(sample_update, mock_context)
            
            # 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await show_interface(sample_update, mock_context, 'user')
            
            # 3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã
            await show_group_data(sample_update, mock_context, 'Group1')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –≤—ã–∑–æ–≤—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ
            assert mock_context.bot.send_message.call_count >= 3

    @pytest.mark.asyncio
    async def test_admin_workflow_threshold_management(self, sample_update, mock_context, mock_env, temp_files):
        """–¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ—Ä–æ–≥–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
        with patch('main.THRESHOLDS_FILE', temp_files['thresholds']), \
             patch('main.get_user_role') as mock_get_role:
            
            mock_get_role.return_value = 'admin'
            
            from main import admin_all_thresholds, load_thresholds, save_thresholds
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Ä–æ–≥–∏
            test_thresholds = {
                'TestGroup': {
                    'sensor_1': {'min': 15, 'max': 35}
                }
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä–æ–≥–∏
            save_thresholds(test_thresholds)
            
            # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –≤—Å–µ –ø–æ—Ä–æ–≥–∏
            await admin_all_thresholds(sample_update, mock_context)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
            loaded_thresholds = load_thresholds()
            
            assert loaded_thresholds == test_thresholds
            mock_context.bot.send_message.assert_called()

    @pytest.mark.asyncio
    async def test_error_handling_chain(self, sample_update, mock_context, mock_env):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ —Ü–µ–ø–æ—á–∫–µ –≤—ã–∑–æ–≤–æ–≤"""
        import requests
        
        with patch('requests.get') as mock_get, \
             patch('main.sensor_data_cache', []):
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å–µ—Ç–∏
            mock_get.side_effect = requests.exceptions.ConnectionError()
            
            from main import fetch_sensor_data, show_all_data
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)
            sensor_data = await fetch_sensor_data()
            assert sensor_data == []
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (–¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö)
            await show_all_data(sample_update, mock_context)
            
            mock_context.bot.send_message.assert_called_once()
            args = mock_context.bot.send_message.call_args[1]
            assert '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã' in args['text'] or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö' in args['text'].lower()

    @pytest.mark.asyncio
    async def test_concurrent_user_requests(self, mock_env, sample_sensor_data):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        from main import format_sensor_message
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        tasks = []
        for i in range(5):
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            sensor = sample_sensor_data['message'][0].copy()
            sensor['device_id'] = f'sensor_{i}'
            task = asyncio.create_task(asyncio.to_thread(format_sensor_message, sensor))
            tasks.append(task)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        results = await asyncio.gather(*tasks)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ
        assert len(results) == 5
        for i, result in enumerate(results):
            assert f'sensor_{i}' in result

    @pytest.mark.asyncio
    async def test_data_persistence_workflow(self, temp_files):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        from main import save_thresholds, load_thresholds, save_admin_info, load_admin_info
        
        with patch('main.THRESHOLDS_FILE', temp_files['thresholds']), \
             patch('main.ADMINS_FILE', temp_files['admins']):
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            test_thresholds = {
                'Group1': {
                    'sensor_1': {'min': 20, 'max': 30}
                }
            }
            
            save_thresholds(test_thresholds)
            loaded_thresholds = load_thresholds()
            assert loaded_thresholds == test_thresholds
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞—Ö
            save_admin_info(123, 'Test Admin', 'Manager')
            admin_info = load_admin_info(123)
            assert admin_info['fio'] == 'Test Admin'
            assert admin_info['position'] == 'Manager'

    @pytest.mark.asyncio
    async def test_role_based_access_integration(self, sample_update, mock_context, mock_env):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π"""
        test_cases = [
            ({'role': 'user', 'expected_buttons': ['üìä –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ']}, 123),
            ({'role': 'admin', 'expected_buttons': ['üè¢ –í—Å–µ –≥—Ä—É–ø–ø—ã']}, 789),
            ({'role': 'big_boss', 'expected_buttons': ['üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤']}, 111)
        ]
        
        for test_case, user_id in test_cases:
            # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ update
            sample_update.effective_user.id = user_id
            sample_update.effective_chat.id = user_id
            
            with patch('main.CHAT_GROUPS', {123: 'Group1'}), \
                 patch('main.ADMIN_GROUPS', {789: 'Admin1'}), \
                 patch('main.BIG_BOSS', {111}):
                
                from main import show_interface, get_user_role
                
                role = get_user_role(user_id)
                assert role == test_case['role']
                
                await show_interface(sample_update, mock_context, role)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–æ–ª–∏
                mock_context.bot.send_message.assert_called()
                args = mock_context.bot.send_message.call_args[1]
                keyboard = args.get('reply_markup')
                
                if keyboard:
                    button_texts = [button.text for row in keyboard.inline_keyboard for button in row]
                    has_expected_button = any(
                        expected in button_text 
                        for expected in test_case['expected_buttons']
                        for button_text in button_texts
                    )
                    # –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ä–æ–ª–µ–π –∫–Ω–æ–ø–∫–∏ –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º mock –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
                mock_context.bot.send_message.reset_mock()

    @pytest.mark.slow
    @pytest.mark.asyncio
    async def test_monitoring_loop_performance(self, sample_sensor_data):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        import time
        
        with patch('requests.get') as mock_get, \
             patch('main.load_thresholds') as mock_load_thresholds:
            
            mock_response = Mock()
            mock_response.status_code = 200
            mock_response.json.return_value = sample_sensor_data
            mock_get.return_value = mock_response
            mock_load_thresholds.return_value = {}
            
            from main import fetch_sensor_data, load_thresholds
            
            # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            start_time = time.time()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
            for _ in range(10):
                await fetch_sensor_data()
                load_thresholds()
            
            end_time = time.time()
            execution_time = end_time - start_time
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –±—ã—Å—Ç—Ä–æ (–º–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã –∑–∞ 10 –∏—Ç–µ—Ä–∞—Ü–∏–π)
            assert execution_time < 1.0, f"–û–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ: {execution_time}s"